// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/danielhookx/go_skill/exercise/ent/ent/predicate"
	"github.com/danielhookx/go_skill/exercise/ent/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNickName sets the "nick_name" field.
func (uu *UserUpdate) SetNickName(s string) *UserUpdate {
	uu.mutation.SetNickName(s)
	return uu
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNickName(s *string) *UserUpdate {
	if s != nil {
		uu.SetNickName(*s)
	}
	return uu
}

// SetF1 sets the "f1" field.
func (uu *UserUpdate) SetF1(s string) *UserUpdate {
	uu.mutation.SetF1(s)
	return uu
}

// SetNillableF1 sets the "f1" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF1(s *string) *UserUpdate {
	if s != nil {
		uu.SetF1(*s)
	}
	return uu
}

// SetF2 sets the "f2" field.
func (uu *UserUpdate) SetF2(s string) *UserUpdate {
	uu.mutation.SetF2(s)
	return uu
}

// SetNillableF2 sets the "f2" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF2(s *string) *UserUpdate {
	if s != nil {
		uu.SetF2(*s)
	}
	return uu
}

// SetF3 sets the "f3" field.
func (uu *UserUpdate) SetF3(s string) *UserUpdate {
	uu.mutation.SetF3(s)
	return uu
}

// SetNillableF3 sets the "f3" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF3(s *string) *UserUpdate {
	if s != nil {
		uu.SetF3(*s)
	}
	return uu
}

// SetF4 sets the "f4" field.
func (uu *UserUpdate) SetF4(s string) *UserUpdate {
	uu.mutation.SetF4(s)
	return uu
}

// SetNillableF4 sets the "f4" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF4(s *string) *UserUpdate {
	if s != nil {
		uu.SetF4(*s)
	}
	return uu
}

// SetF5 sets the "f5" field.
func (uu *UserUpdate) SetF5(s string) *UserUpdate {
	uu.mutation.SetF5(s)
	return uu
}

// SetNillableF5 sets the "f5" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF5(s *string) *UserUpdate {
	if s != nil {
		uu.SetF5(*s)
	}
	return uu
}

// SetF6 sets the "f6" field.
func (uu *UserUpdate) SetF6(s string) *UserUpdate {
	uu.mutation.SetF6(s)
	return uu
}

// SetNillableF6 sets the "f6" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF6(s *string) *UserUpdate {
	if s != nil {
		uu.SetF6(*s)
	}
	return uu
}

// SetF7 sets the "f7" field.
func (uu *UserUpdate) SetF7(s string) *UserUpdate {
	uu.mutation.SetF7(s)
	return uu
}

// SetNillableF7 sets the "f7" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF7(s *string) *UserUpdate {
	if s != nil {
		uu.SetF7(*s)
	}
	return uu
}

// SetF8 sets the "f8" field.
func (uu *UserUpdate) SetF8(s string) *UserUpdate {
	uu.mutation.SetF8(s)
	return uu
}

// SetNillableF8 sets the "f8" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF8(s *string) *UserUpdate {
	if s != nil {
		uu.SetF8(*s)
	}
	return uu
}

// SetF9 sets the "f9" field.
func (uu *UserUpdate) SetF9(s string) *UserUpdate {
	uu.mutation.SetF9(s)
	return uu
}

// SetNillableF9 sets the "f9" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF9(s *string) *UserUpdate {
	if s != nil {
		uu.SetF9(*s)
	}
	return uu
}

// SetF10 sets the "f10" field.
func (uu *UserUpdate) SetF10(s string) *UserUpdate {
	uu.mutation.SetF10(s)
	return uu
}

// SetNillableF10 sets the "f10" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF10(s *string) *UserUpdate {
	if s != nil {
		uu.SetF10(*s)
	}
	return uu
}

// SetF11 sets the "f11" field.
func (uu *UserUpdate) SetF11(s string) *UserUpdate {
	uu.mutation.SetF11(s)
	return uu
}

// SetNillableF11 sets the "f11" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF11(s *string) *UserUpdate {
	if s != nil {
		uu.SetF11(*s)
	}
	return uu
}

// SetF12 sets the "f12" field.
func (uu *UserUpdate) SetF12(s string) *UserUpdate {
	uu.mutation.SetF12(s)
	return uu
}

// SetNillableF12 sets the "f12" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF12(s *string) *UserUpdate {
	if s != nil {
		uu.SetF12(*s)
	}
	return uu
}

// SetF13 sets the "f13" field.
func (uu *UserUpdate) SetF13(s string) *UserUpdate {
	uu.mutation.SetF13(s)
	return uu
}

// SetNillableF13 sets the "f13" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF13(s *string) *UserUpdate {
	if s != nil {
		uu.SetF13(*s)
	}
	return uu
}

// SetF14 sets the "f14" field.
func (uu *UserUpdate) SetF14(s string) *UserUpdate {
	uu.mutation.SetF14(s)
	return uu
}

// SetNillableF14 sets the "f14" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF14(s *string) *UserUpdate {
	if s != nil {
		uu.SetF14(*s)
	}
	return uu
}

// SetF15 sets the "f15" field.
func (uu *UserUpdate) SetF15(s string) *UserUpdate {
	uu.mutation.SetF15(s)
	return uu
}

// SetNillableF15 sets the "f15" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF15(s *string) *UserUpdate {
	if s != nil {
		uu.SetF15(*s)
	}
	return uu
}

// SetF16 sets the "f16" field.
func (uu *UserUpdate) SetF16(s string) *UserUpdate {
	uu.mutation.SetF16(s)
	return uu
}

// SetNillableF16 sets the "f16" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF16(s *string) *UserUpdate {
	if s != nil {
		uu.SetF16(*s)
	}
	return uu
}

// SetF17 sets the "f17" field.
func (uu *UserUpdate) SetF17(s string) *UserUpdate {
	uu.mutation.SetF17(s)
	return uu
}

// SetNillableF17 sets the "f17" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF17(s *string) *UserUpdate {
	if s != nil {
		uu.SetF17(*s)
	}
	return uu
}

// SetF18 sets the "f18" field.
func (uu *UserUpdate) SetF18(s string) *UserUpdate {
	uu.mutation.SetF18(s)
	return uu
}

// SetNillableF18 sets the "f18" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF18(s *string) *UserUpdate {
	if s != nil {
		uu.SetF18(*s)
	}
	return uu
}

// SetF19 sets the "f19" field.
func (uu *UserUpdate) SetF19(s string) *UserUpdate {
	uu.mutation.SetF19(s)
	return uu
}

// SetNillableF19 sets the "f19" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF19(s *string) *UserUpdate {
	if s != nil {
		uu.SetF19(*s)
	}
	return uu
}

// SetF20 sets the "f20" field.
func (uu *UserUpdate) SetF20(s string) *UserUpdate {
	uu.mutation.SetF20(s)
	return uu
}

// SetNillableF20 sets the "f20" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF20(s *string) *UserUpdate {
	if s != nil {
		uu.SetF20(*s)
	}
	return uu
}

// SetF21 sets the "f21" field.
func (uu *UserUpdate) SetF21(s string) *UserUpdate {
	uu.mutation.SetF21(s)
	return uu
}

// SetNillableF21 sets the "f21" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF21(s *string) *UserUpdate {
	if s != nil {
		uu.SetF21(*s)
	}
	return uu
}

// SetF22 sets the "f22" field.
func (uu *UserUpdate) SetF22(s string) *UserUpdate {
	uu.mutation.SetF22(s)
	return uu
}

// SetNillableF22 sets the "f22" field if the given value is not nil.
func (uu *UserUpdate) SetNillableF22(s *string) *UserUpdate {
	if s != nil {
		uu.SetF22(*s)
	}
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
	}
	if value, ok := uu.mutation.F1(); ok {
		_spec.SetField(user.FieldF1, field.TypeString, value)
	}
	if value, ok := uu.mutation.F2(); ok {
		_spec.SetField(user.FieldF2, field.TypeString, value)
	}
	if value, ok := uu.mutation.F3(); ok {
		_spec.SetField(user.FieldF3, field.TypeString, value)
	}
	if value, ok := uu.mutation.F4(); ok {
		_spec.SetField(user.FieldF4, field.TypeString, value)
	}
	if value, ok := uu.mutation.F5(); ok {
		_spec.SetField(user.FieldF5, field.TypeString, value)
	}
	if value, ok := uu.mutation.F6(); ok {
		_spec.SetField(user.FieldF6, field.TypeString, value)
	}
	if value, ok := uu.mutation.F7(); ok {
		_spec.SetField(user.FieldF7, field.TypeString, value)
	}
	if value, ok := uu.mutation.F8(); ok {
		_spec.SetField(user.FieldF8, field.TypeString, value)
	}
	if value, ok := uu.mutation.F9(); ok {
		_spec.SetField(user.FieldF9, field.TypeString, value)
	}
	if value, ok := uu.mutation.F10(); ok {
		_spec.SetField(user.FieldF10, field.TypeString, value)
	}
	if value, ok := uu.mutation.F11(); ok {
		_spec.SetField(user.FieldF11, field.TypeString, value)
	}
	if value, ok := uu.mutation.F12(); ok {
		_spec.SetField(user.FieldF12, field.TypeString, value)
	}
	if value, ok := uu.mutation.F13(); ok {
		_spec.SetField(user.FieldF13, field.TypeString, value)
	}
	if value, ok := uu.mutation.F14(); ok {
		_spec.SetField(user.FieldF14, field.TypeString, value)
	}
	if value, ok := uu.mutation.F15(); ok {
		_spec.SetField(user.FieldF15, field.TypeString, value)
	}
	if value, ok := uu.mutation.F16(); ok {
		_spec.SetField(user.FieldF16, field.TypeString, value)
	}
	if value, ok := uu.mutation.F17(); ok {
		_spec.SetField(user.FieldF17, field.TypeString, value)
	}
	if value, ok := uu.mutation.F18(); ok {
		_spec.SetField(user.FieldF18, field.TypeString, value)
	}
	if value, ok := uu.mutation.F19(); ok {
		_spec.SetField(user.FieldF19, field.TypeString, value)
	}
	if value, ok := uu.mutation.F20(); ok {
		_spec.SetField(user.FieldF20, field.TypeString, value)
	}
	if value, ok := uu.mutation.F21(); ok {
		_spec.SetField(user.FieldF21, field.TypeString, value)
	}
	if value, ok := uu.mutation.F22(); ok {
		_spec.SetField(user.FieldF22, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNickName sets the "nick_name" field.
func (uuo *UserUpdateOne) SetNickName(s string) *UserUpdateOne {
	uuo.mutation.SetNickName(s)
	return uuo
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNickName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetNickName(*s)
	}
	return uuo
}

// SetF1 sets the "f1" field.
func (uuo *UserUpdateOne) SetF1(s string) *UserUpdateOne {
	uuo.mutation.SetF1(s)
	return uuo
}

// SetNillableF1 sets the "f1" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF1(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF1(*s)
	}
	return uuo
}

// SetF2 sets the "f2" field.
func (uuo *UserUpdateOne) SetF2(s string) *UserUpdateOne {
	uuo.mutation.SetF2(s)
	return uuo
}

// SetNillableF2 sets the "f2" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF2(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF2(*s)
	}
	return uuo
}

// SetF3 sets the "f3" field.
func (uuo *UserUpdateOne) SetF3(s string) *UserUpdateOne {
	uuo.mutation.SetF3(s)
	return uuo
}

// SetNillableF3 sets the "f3" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF3(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF3(*s)
	}
	return uuo
}

// SetF4 sets the "f4" field.
func (uuo *UserUpdateOne) SetF4(s string) *UserUpdateOne {
	uuo.mutation.SetF4(s)
	return uuo
}

// SetNillableF4 sets the "f4" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF4(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF4(*s)
	}
	return uuo
}

// SetF5 sets the "f5" field.
func (uuo *UserUpdateOne) SetF5(s string) *UserUpdateOne {
	uuo.mutation.SetF5(s)
	return uuo
}

// SetNillableF5 sets the "f5" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF5(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF5(*s)
	}
	return uuo
}

// SetF6 sets the "f6" field.
func (uuo *UserUpdateOne) SetF6(s string) *UserUpdateOne {
	uuo.mutation.SetF6(s)
	return uuo
}

// SetNillableF6 sets the "f6" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF6(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF6(*s)
	}
	return uuo
}

// SetF7 sets the "f7" field.
func (uuo *UserUpdateOne) SetF7(s string) *UserUpdateOne {
	uuo.mutation.SetF7(s)
	return uuo
}

// SetNillableF7 sets the "f7" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF7(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF7(*s)
	}
	return uuo
}

// SetF8 sets the "f8" field.
func (uuo *UserUpdateOne) SetF8(s string) *UserUpdateOne {
	uuo.mutation.SetF8(s)
	return uuo
}

// SetNillableF8 sets the "f8" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF8(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF8(*s)
	}
	return uuo
}

// SetF9 sets the "f9" field.
func (uuo *UserUpdateOne) SetF9(s string) *UserUpdateOne {
	uuo.mutation.SetF9(s)
	return uuo
}

// SetNillableF9 sets the "f9" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF9(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF9(*s)
	}
	return uuo
}

// SetF10 sets the "f10" field.
func (uuo *UserUpdateOne) SetF10(s string) *UserUpdateOne {
	uuo.mutation.SetF10(s)
	return uuo
}

// SetNillableF10 sets the "f10" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF10(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF10(*s)
	}
	return uuo
}

// SetF11 sets the "f11" field.
func (uuo *UserUpdateOne) SetF11(s string) *UserUpdateOne {
	uuo.mutation.SetF11(s)
	return uuo
}

// SetNillableF11 sets the "f11" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF11(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF11(*s)
	}
	return uuo
}

// SetF12 sets the "f12" field.
func (uuo *UserUpdateOne) SetF12(s string) *UserUpdateOne {
	uuo.mutation.SetF12(s)
	return uuo
}

// SetNillableF12 sets the "f12" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF12(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF12(*s)
	}
	return uuo
}

// SetF13 sets the "f13" field.
func (uuo *UserUpdateOne) SetF13(s string) *UserUpdateOne {
	uuo.mutation.SetF13(s)
	return uuo
}

// SetNillableF13 sets the "f13" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF13(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF13(*s)
	}
	return uuo
}

// SetF14 sets the "f14" field.
func (uuo *UserUpdateOne) SetF14(s string) *UserUpdateOne {
	uuo.mutation.SetF14(s)
	return uuo
}

// SetNillableF14 sets the "f14" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF14(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF14(*s)
	}
	return uuo
}

// SetF15 sets the "f15" field.
func (uuo *UserUpdateOne) SetF15(s string) *UserUpdateOne {
	uuo.mutation.SetF15(s)
	return uuo
}

// SetNillableF15 sets the "f15" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF15(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF15(*s)
	}
	return uuo
}

// SetF16 sets the "f16" field.
func (uuo *UserUpdateOne) SetF16(s string) *UserUpdateOne {
	uuo.mutation.SetF16(s)
	return uuo
}

// SetNillableF16 sets the "f16" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF16(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF16(*s)
	}
	return uuo
}

// SetF17 sets the "f17" field.
func (uuo *UserUpdateOne) SetF17(s string) *UserUpdateOne {
	uuo.mutation.SetF17(s)
	return uuo
}

// SetNillableF17 sets the "f17" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF17(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF17(*s)
	}
	return uuo
}

// SetF18 sets the "f18" field.
func (uuo *UserUpdateOne) SetF18(s string) *UserUpdateOne {
	uuo.mutation.SetF18(s)
	return uuo
}

// SetNillableF18 sets the "f18" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF18(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF18(*s)
	}
	return uuo
}

// SetF19 sets the "f19" field.
func (uuo *UserUpdateOne) SetF19(s string) *UserUpdateOne {
	uuo.mutation.SetF19(s)
	return uuo
}

// SetNillableF19 sets the "f19" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF19(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF19(*s)
	}
	return uuo
}

// SetF20 sets the "f20" field.
func (uuo *UserUpdateOne) SetF20(s string) *UserUpdateOne {
	uuo.mutation.SetF20(s)
	return uuo
}

// SetNillableF20 sets the "f20" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF20(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF20(*s)
	}
	return uuo
}

// SetF21 sets the "f21" field.
func (uuo *UserUpdateOne) SetF21(s string) *UserUpdateOne {
	uuo.mutation.SetF21(s)
	return uuo
}

// SetNillableF21 sets the "f21" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF21(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF21(*s)
	}
	return uuo
}

// SetF22 sets the "f22" field.
func (uuo *UserUpdateOne) SetF22(s string) *UserUpdateOne {
	uuo.mutation.SetF22(s)
	return uuo
}

// SetNillableF22 sets the "f22" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableF22(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetF22(*s)
	}
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.NickName(); ok {
		_spec.SetField(user.FieldNickName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F1(); ok {
		_spec.SetField(user.FieldF1, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F2(); ok {
		_spec.SetField(user.FieldF2, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F3(); ok {
		_spec.SetField(user.FieldF3, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F4(); ok {
		_spec.SetField(user.FieldF4, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F5(); ok {
		_spec.SetField(user.FieldF5, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F6(); ok {
		_spec.SetField(user.FieldF6, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F7(); ok {
		_spec.SetField(user.FieldF7, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F8(); ok {
		_spec.SetField(user.FieldF8, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F9(); ok {
		_spec.SetField(user.FieldF9, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F10(); ok {
		_spec.SetField(user.FieldF10, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F11(); ok {
		_spec.SetField(user.FieldF11, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F12(); ok {
		_spec.SetField(user.FieldF12, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F13(); ok {
		_spec.SetField(user.FieldF13, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F14(); ok {
		_spec.SetField(user.FieldF14, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F15(); ok {
		_spec.SetField(user.FieldF15, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F16(); ok {
		_spec.SetField(user.FieldF16, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F17(); ok {
		_spec.SetField(user.FieldF17, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F18(); ok {
		_spec.SetField(user.FieldF18, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F19(); ok {
		_spec.SetField(user.FieldF19, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F20(); ok {
		_spec.SetField(user.FieldF20, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F21(); ok {
		_spec.SetField(user.FieldF21, field.TypeString, value)
	}
	if value, ok := uuo.mutation.F22(); ok {
		_spec.SetField(user.FieldF22, field.TypeString, value)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
