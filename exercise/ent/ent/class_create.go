// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/danielhookx/go_skill/exercise/ent/ent/class"
)

// ClassCreate is the builder for creating a Class entity.
type ClassCreate struct {
	config
	mutation *ClassMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *ClassCreate) SetName(s string) *ClassCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetClassName sets the "class_name" field.
func (cc *ClassCreate) SetClassName(s string) *ClassCreate {
	cc.mutation.SetClassName(s)
	return cc
}

// SetF1 sets the "f1" field.
func (cc *ClassCreate) SetF1(s string) *ClassCreate {
	cc.mutation.SetF1(s)
	return cc
}

// SetNillableF1 sets the "f1" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF1(s *string) *ClassCreate {
	if s != nil {
		cc.SetF1(*s)
	}
	return cc
}

// SetF2 sets the "f2" field.
func (cc *ClassCreate) SetF2(s string) *ClassCreate {
	cc.mutation.SetF2(s)
	return cc
}

// SetNillableF2 sets the "f2" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF2(s *string) *ClassCreate {
	if s != nil {
		cc.SetF2(*s)
	}
	return cc
}

// SetF3 sets the "f3" field.
func (cc *ClassCreate) SetF3(s string) *ClassCreate {
	cc.mutation.SetF3(s)
	return cc
}

// SetNillableF3 sets the "f3" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF3(s *string) *ClassCreate {
	if s != nil {
		cc.SetF3(*s)
	}
	return cc
}

// SetF4 sets the "f4" field.
func (cc *ClassCreate) SetF4(s string) *ClassCreate {
	cc.mutation.SetF4(s)
	return cc
}

// SetNillableF4 sets the "f4" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF4(s *string) *ClassCreate {
	if s != nil {
		cc.SetF4(*s)
	}
	return cc
}

// SetF5 sets the "f5" field.
func (cc *ClassCreate) SetF5(s string) *ClassCreate {
	cc.mutation.SetF5(s)
	return cc
}

// SetNillableF5 sets the "f5" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF5(s *string) *ClassCreate {
	if s != nil {
		cc.SetF5(*s)
	}
	return cc
}

// SetF6 sets the "f6" field.
func (cc *ClassCreate) SetF6(s string) *ClassCreate {
	cc.mutation.SetF6(s)
	return cc
}

// SetNillableF6 sets the "f6" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF6(s *string) *ClassCreate {
	if s != nil {
		cc.SetF6(*s)
	}
	return cc
}

// SetF7 sets the "f7" field.
func (cc *ClassCreate) SetF7(s string) *ClassCreate {
	cc.mutation.SetF7(s)
	return cc
}

// SetNillableF7 sets the "f7" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF7(s *string) *ClassCreate {
	if s != nil {
		cc.SetF7(*s)
	}
	return cc
}

// SetF8 sets the "f8" field.
func (cc *ClassCreate) SetF8(s string) *ClassCreate {
	cc.mutation.SetF8(s)
	return cc
}

// SetNillableF8 sets the "f8" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF8(s *string) *ClassCreate {
	if s != nil {
		cc.SetF8(*s)
	}
	return cc
}

// SetF9 sets the "f9" field.
func (cc *ClassCreate) SetF9(s string) *ClassCreate {
	cc.mutation.SetF9(s)
	return cc
}

// SetNillableF9 sets the "f9" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF9(s *string) *ClassCreate {
	if s != nil {
		cc.SetF9(*s)
	}
	return cc
}

// SetF10 sets the "f10" field.
func (cc *ClassCreate) SetF10(s string) *ClassCreate {
	cc.mutation.SetF10(s)
	return cc
}

// SetNillableF10 sets the "f10" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF10(s *string) *ClassCreate {
	if s != nil {
		cc.SetF10(*s)
	}
	return cc
}

// SetF11 sets the "f11" field.
func (cc *ClassCreate) SetF11(s string) *ClassCreate {
	cc.mutation.SetF11(s)
	return cc
}

// SetNillableF11 sets the "f11" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF11(s *string) *ClassCreate {
	if s != nil {
		cc.SetF11(*s)
	}
	return cc
}

// SetF12 sets the "f12" field.
func (cc *ClassCreate) SetF12(s string) *ClassCreate {
	cc.mutation.SetF12(s)
	return cc
}

// SetNillableF12 sets the "f12" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF12(s *string) *ClassCreate {
	if s != nil {
		cc.SetF12(*s)
	}
	return cc
}

// SetF13 sets the "f13" field.
func (cc *ClassCreate) SetF13(s string) *ClassCreate {
	cc.mutation.SetF13(s)
	return cc
}

// SetNillableF13 sets the "f13" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF13(s *string) *ClassCreate {
	if s != nil {
		cc.SetF13(*s)
	}
	return cc
}

// SetF14 sets the "f14" field.
func (cc *ClassCreate) SetF14(s string) *ClassCreate {
	cc.mutation.SetF14(s)
	return cc
}

// SetNillableF14 sets the "f14" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF14(s *string) *ClassCreate {
	if s != nil {
		cc.SetF14(*s)
	}
	return cc
}

// SetF15 sets the "f15" field.
func (cc *ClassCreate) SetF15(s string) *ClassCreate {
	cc.mutation.SetF15(s)
	return cc
}

// SetNillableF15 sets the "f15" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF15(s *string) *ClassCreate {
	if s != nil {
		cc.SetF15(*s)
	}
	return cc
}

// SetF16 sets the "f16" field.
func (cc *ClassCreate) SetF16(s string) *ClassCreate {
	cc.mutation.SetF16(s)
	return cc
}

// SetNillableF16 sets the "f16" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF16(s *string) *ClassCreate {
	if s != nil {
		cc.SetF16(*s)
	}
	return cc
}

// SetF17 sets the "f17" field.
func (cc *ClassCreate) SetF17(s string) *ClassCreate {
	cc.mutation.SetF17(s)
	return cc
}

// SetNillableF17 sets the "f17" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF17(s *string) *ClassCreate {
	if s != nil {
		cc.SetF17(*s)
	}
	return cc
}

// SetF18 sets the "f18" field.
func (cc *ClassCreate) SetF18(s string) *ClassCreate {
	cc.mutation.SetF18(s)
	return cc
}

// SetNillableF18 sets the "f18" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF18(s *string) *ClassCreate {
	if s != nil {
		cc.SetF18(*s)
	}
	return cc
}

// SetF19 sets the "f19" field.
func (cc *ClassCreate) SetF19(s string) *ClassCreate {
	cc.mutation.SetF19(s)
	return cc
}

// SetNillableF19 sets the "f19" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF19(s *string) *ClassCreate {
	if s != nil {
		cc.SetF19(*s)
	}
	return cc
}

// SetF20 sets the "f20" field.
func (cc *ClassCreate) SetF20(s string) *ClassCreate {
	cc.mutation.SetF20(s)
	return cc
}

// SetNillableF20 sets the "f20" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF20(s *string) *ClassCreate {
	if s != nil {
		cc.SetF20(*s)
	}
	return cc
}

// SetF21 sets the "f21" field.
func (cc *ClassCreate) SetF21(s string) *ClassCreate {
	cc.mutation.SetF21(s)
	return cc
}

// SetNillableF21 sets the "f21" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF21(s *string) *ClassCreate {
	if s != nil {
		cc.SetF21(*s)
	}
	return cc
}

// SetF22 sets the "f22" field.
func (cc *ClassCreate) SetF22(s string) *ClassCreate {
	cc.mutation.SetF22(s)
	return cc
}

// SetNillableF22 sets the "f22" field if the given value is not nil.
func (cc *ClassCreate) SetNillableF22(s *string) *ClassCreate {
	if s != nil {
		cc.SetF22(*s)
	}
	return cc
}

// Mutation returns the ClassMutation object of the builder.
func (cc *ClassCreate) Mutation() *ClassMutation {
	return cc.mutation
}

// Save creates the Class in the database.
func (cc *ClassCreate) Save(ctx context.Context) (*Class, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClassCreate) SaveX(ctx context.Context) *Class {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClassCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClassCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ClassCreate) defaults() {
	if _, ok := cc.mutation.F1(); !ok {
		v := class.DefaultF1
		cc.mutation.SetF1(v)
	}
	if _, ok := cc.mutation.F2(); !ok {
		v := class.DefaultF2
		cc.mutation.SetF2(v)
	}
	if _, ok := cc.mutation.F3(); !ok {
		v := class.DefaultF3
		cc.mutation.SetF3(v)
	}
	if _, ok := cc.mutation.F4(); !ok {
		v := class.DefaultF4
		cc.mutation.SetF4(v)
	}
	if _, ok := cc.mutation.F5(); !ok {
		v := class.DefaultF5
		cc.mutation.SetF5(v)
	}
	if _, ok := cc.mutation.F6(); !ok {
		v := class.DefaultF6
		cc.mutation.SetF6(v)
	}
	if _, ok := cc.mutation.F7(); !ok {
		v := class.DefaultF7
		cc.mutation.SetF7(v)
	}
	if _, ok := cc.mutation.F8(); !ok {
		v := class.DefaultF8
		cc.mutation.SetF8(v)
	}
	if _, ok := cc.mutation.F9(); !ok {
		v := class.DefaultF9
		cc.mutation.SetF9(v)
	}
	if _, ok := cc.mutation.F10(); !ok {
		v := class.DefaultF10
		cc.mutation.SetF10(v)
	}
	if _, ok := cc.mutation.F11(); !ok {
		v := class.DefaultF11
		cc.mutation.SetF11(v)
	}
	if _, ok := cc.mutation.F12(); !ok {
		v := class.DefaultF12
		cc.mutation.SetF12(v)
	}
	if _, ok := cc.mutation.F13(); !ok {
		v := class.DefaultF13
		cc.mutation.SetF13(v)
	}
	if _, ok := cc.mutation.F14(); !ok {
		v := class.DefaultF14
		cc.mutation.SetF14(v)
	}
	if _, ok := cc.mutation.F15(); !ok {
		v := class.DefaultF15
		cc.mutation.SetF15(v)
	}
	if _, ok := cc.mutation.F16(); !ok {
		v := class.DefaultF16
		cc.mutation.SetF16(v)
	}
	if _, ok := cc.mutation.F17(); !ok {
		v := class.DefaultF17
		cc.mutation.SetF17(v)
	}
	if _, ok := cc.mutation.F18(); !ok {
		v := class.DefaultF18
		cc.mutation.SetF18(v)
	}
	if _, ok := cc.mutation.F19(); !ok {
		v := class.DefaultF19
		cc.mutation.SetF19(v)
	}
	if _, ok := cc.mutation.F20(); !ok {
		v := class.DefaultF20
		cc.mutation.SetF20(v)
	}
	if _, ok := cc.mutation.F21(); !ok {
		v := class.DefaultF21
		cc.mutation.SetF21(v)
	}
	if _, ok := cc.mutation.F22(); !ok {
		v := class.DefaultF22
		cc.mutation.SetF22(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClassCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Class.name"`)}
	}
	if _, ok := cc.mutation.ClassName(); !ok {
		return &ValidationError{Name: "class_name", err: errors.New(`ent: missing required field "Class.class_name"`)}
	}
	if _, ok := cc.mutation.F1(); !ok {
		return &ValidationError{Name: "f1", err: errors.New(`ent: missing required field "Class.f1"`)}
	}
	if _, ok := cc.mutation.F2(); !ok {
		return &ValidationError{Name: "f2", err: errors.New(`ent: missing required field "Class.f2"`)}
	}
	if _, ok := cc.mutation.F3(); !ok {
		return &ValidationError{Name: "f3", err: errors.New(`ent: missing required field "Class.f3"`)}
	}
	if _, ok := cc.mutation.F4(); !ok {
		return &ValidationError{Name: "f4", err: errors.New(`ent: missing required field "Class.f4"`)}
	}
	if _, ok := cc.mutation.F5(); !ok {
		return &ValidationError{Name: "f5", err: errors.New(`ent: missing required field "Class.f5"`)}
	}
	if _, ok := cc.mutation.F6(); !ok {
		return &ValidationError{Name: "f6", err: errors.New(`ent: missing required field "Class.f6"`)}
	}
	if _, ok := cc.mutation.F7(); !ok {
		return &ValidationError{Name: "f7", err: errors.New(`ent: missing required field "Class.f7"`)}
	}
	if _, ok := cc.mutation.F8(); !ok {
		return &ValidationError{Name: "f8", err: errors.New(`ent: missing required field "Class.f8"`)}
	}
	if _, ok := cc.mutation.F9(); !ok {
		return &ValidationError{Name: "f9", err: errors.New(`ent: missing required field "Class.f9"`)}
	}
	if _, ok := cc.mutation.F10(); !ok {
		return &ValidationError{Name: "f10", err: errors.New(`ent: missing required field "Class.f10"`)}
	}
	if _, ok := cc.mutation.F11(); !ok {
		return &ValidationError{Name: "f11", err: errors.New(`ent: missing required field "Class.f11"`)}
	}
	if _, ok := cc.mutation.F12(); !ok {
		return &ValidationError{Name: "f12", err: errors.New(`ent: missing required field "Class.f12"`)}
	}
	if _, ok := cc.mutation.F13(); !ok {
		return &ValidationError{Name: "f13", err: errors.New(`ent: missing required field "Class.f13"`)}
	}
	if _, ok := cc.mutation.F14(); !ok {
		return &ValidationError{Name: "f14", err: errors.New(`ent: missing required field "Class.f14"`)}
	}
	if _, ok := cc.mutation.F15(); !ok {
		return &ValidationError{Name: "f15", err: errors.New(`ent: missing required field "Class.f15"`)}
	}
	if _, ok := cc.mutation.F16(); !ok {
		return &ValidationError{Name: "f16", err: errors.New(`ent: missing required field "Class.f16"`)}
	}
	if _, ok := cc.mutation.F17(); !ok {
		return &ValidationError{Name: "f17", err: errors.New(`ent: missing required field "Class.f17"`)}
	}
	if _, ok := cc.mutation.F18(); !ok {
		return &ValidationError{Name: "f18", err: errors.New(`ent: missing required field "Class.f18"`)}
	}
	if _, ok := cc.mutation.F19(); !ok {
		return &ValidationError{Name: "f19", err: errors.New(`ent: missing required field "Class.f19"`)}
	}
	if _, ok := cc.mutation.F20(); !ok {
		return &ValidationError{Name: "f20", err: errors.New(`ent: missing required field "Class.f20"`)}
	}
	if _, ok := cc.mutation.F21(); !ok {
		return &ValidationError{Name: "f21", err: errors.New(`ent: missing required field "Class.f21"`)}
	}
	if _, ok := cc.mutation.F22(); !ok {
		return &ValidationError{Name: "f22", err: errors.New(`ent: missing required field "Class.f22"`)}
	}
	return nil
}

func (cc *ClassCreate) sqlSave(ctx context.Context) (*Class, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClassCreate) createSpec() (*Class, *sqlgraph.CreateSpec) {
	var (
		_node = &Class{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(class.Table, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.ClassName(); ok {
		_spec.SetField(class.FieldClassName, field.TypeString, value)
		_node.ClassName = value
	}
	if value, ok := cc.mutation.F1(); ok {
		_spec.SetField(class.FieldF1, field.TypeString, value)
		_node.F1 = value
	}
	if value, ok := cc.mutation.F2(); ok {
		_spec.SetField(class.FieldF2, field.TypeString, value)
		_node.F2 = value
	}
	if value, ok := cc.mutation.F3(); ok {
		_spec.SetField(class.FieldF3, field.TypeString, value)
		_node.F3 = value
	}
	if value, ok := cc.mutation.F4(); ok {
		_spec.SetField(class.FieldF4, field.TypeString, value)
		_node.F4 = value
	}
	if value, ok := cc.mutation.F5(); ok {
		_spec.SetField(class.FieldF5, field.TypeString, value)
		_node.F5 = value
	}
	if value, ok := cc.mutation.F6(); ok {
		_spec.SetField(class.FieldF6, field.TypeString, value)
		_node.F6 = value
	}
	if value, ok := cc.mutation.F7(); ok {
		_spec.SetField(class.FieldF7, field.TypeString, value)
		_node.F7 = value
	}
	if value, ok := cc.mutation.F8(); ok {
		_spec.SetField(class.FieldF8, field.TypeString, value)
		_node.F8 = value
	}
	if value, ok := cc.mutation.F9(); ok {
		_spec.SetField(class.FieldF9, field.TypeString, value)
		_node.F9 = value
	}
	if value, ok := cc.mutation.F10(); ok {
		_spec.SetField(class.FieldF10, field.TypeString, value)
		_node.F10 = value
	}
	if value, ok := cc.mutation.F11(); ok {
		_spec.SetField(class.FieldF11, field.TypeString, value)
		_node.F11 = value
	}
	if value, ok := cc.mutation.F12(); ok {
		_spec.SetField(class.FieldF12, field.TypeString, value)
		_node.F12 = value
	}
	if value, ok := cc.mutation.F13(); ok {
		_spec.SetField(class.FieldF13, field.TypeString, value)
		_node.F13 = value
	}
	if value, ok := cc.mutation.F14(); ok {
		_spec.SetField(class.FieldF14, field.TypeString, value)
		_node.F14 = value
	}
	if value, ok := cc.mutation.F15(); ok {
		_spec.SetField(class.FieldF15, field.TypeString, value)
		_node.F15 = value
	}
	if value, ok := cc.mutation.F16(); ok {
		_spec.SetField(class.FieldF16, field.TypeString, value)
		_node.F16 = value
	}
	if value, ok := cc.mutation.F17(); ok {
		_spec.SetField(class.FieldF17, field.TypeString, value)
		_node.F17 = value
	}
	if value, ok := cc.mutation.F18(); ok {
		_spec.SetField(class.FieldF18, field.TypeString, value)
		_node.F18 = value
	}
	if value, ok := cc.mutation.F19(); ok {
		_spec.SetField(class.FieldF19, field.TypeString, value)
		_node.F19 = value
	}
	if value, ok := cc.mutation.F20(); ok {
		_spec.SetField(class.FieldF20, field.TypeString, value)
		_node.F20 = value
	}
	if value, ok := cc.mutation.F21(); ok {
		_spec.SetField(class.FieldF21, field.TypeString, value)
		_node.F21 = value
	}
	if value, ok := cc.mutation.F22(); ok {
		_spec.SetField(class.FieldF22, field.TypeString, value)
		_node.F22 = value
	}
	return _node, _spec
}

// ClassCreateBulk is the builder for creating many Class entities in bulk.
type ClassCreateBulk struct {
	config
	builders []*ClassCreate
}

// Save creates the Class entities in the database.
func (ccb *ClassCreateBulk) Save(ctx context.Context) ([]*Class, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Class, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClassMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClassCreateBulk) SaveX(ctx context.Context) []*Class {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClassCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClassCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
