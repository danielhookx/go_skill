// Code generated by ent, DO NOT EDIT.

package class

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the class type in the database.
	Label = "class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldClassName holds the string denoting the class_name field in the database.
	FieldClassName = "class_name"
	// FieldF1 holds the string denoting the f1 field in the database.
	FieldF1 = "f1"
	// FieldF2 holds the string denoting the f2 field in the database.
	FieldF2 = "f2"
	// FieldF3 holds the string denoting the f3 field in the database.
	FieldF3 = "f3"
	// FieldF4 holds the string denoting the f4 field in the database.
	FieldF4 = "f4"
	// FieldF5 holds the string denoting the f5 field in the database.
	FieldF5 = "f5"
	// FieldF6 holds the string denoting the f6 field in the database.
	FieldF6 = "f6"
	// FieldF7 holds the string denoting the f7 field in the database.
	FieldF7 = "f7"
	// FieldF8 holds the string denoting the f8 field in the database.
	FieldF8 = "f8"
	// FieldF9 holds the string denoting the f9 field in the database.
	FieldF9 = "f9"
	// FieldF10 holds the string denoting the f10 field in the database.
	FieldF10 = "f10"
	// FieldF11 holds the string denoting the f11 field in the database.
	FieldF11 = "f11"
	// FieldF12 holds the string denoting the f12 field in the database.
	FieldF12 = "f12"
	// FieldF13 holds the string denoting the f13 field in the database.
	FieldF13 = "f13"
	// FieldF14 holds the string denoting the f14 field in the database.
	FieldF14 = "f14"
	// FieldF15 holds the string denoting the f15 field in the database.
	FieldF15 = "f15"
	// FieldF16 holds the string denoting the f16 field in the database.
	FieldF16 = "f16"
	// FieldF17 holds the string denoting the f17 field in the database.
	FieldF17 = "f17"
	// FieldF18 holds the string denoting the f18 field in the database.
	FieldF18 = "f18"
	// FieldF19 holds the string denoting the f19 field in the database.
	FieldF19 = "f19"
	// FieldF20 holds the string denoting the f20 field in the database.
	FieldF20 = "f20"
	// FieldF21 holds the string denoting the f21 field in the database.
	FieldF21 = "f21"
	// FieldF22 holds the string denoting the f22 field in the database.
	FieldF22 = "f22"
	// Table holds the table name of the class in the database.
	Table = "classes"
)

// Columns holds all SQL columns for class fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldClassName,
	FieldF1,
	FieldF2,
	FieldF3,
	FieldF4,
	FieldF5,
	FieldF6,
	FieldF7,
	FieldF8,
	FieldF9,
	FieldF10,
	FieldF11,
	FieldF12,
	FieldF13,
	FieldF14,
	FieldF15,
	FieldF16,
	FieldF17,
	FieldF18,
	FieldF19,
	FieldF20,
	FieldF21,
	FieldF22,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultF1 holds the default value on creation for the "f1" field.
	DefaultF1 string
	// DefaultF2 holds the default value on creation for the "f2" field.
	DefaultF2 string
	// DefaultF3 holds the default value on creation for the "f3" field.
	DefaultF3 string
	// DefaultF4 holds the default value on creation for the "f4" field.
	DefaultF4 string
	// DefaultF5 holds the default value on creation for the "f5" field.
	DefaultF5 string
	// DefaultF6 holds the default value on creation for the "f6" field.
	DefaultF6 string
	// DefaultF7 holds the default value on creation for the "f7" field.
	DefaultF7 string
	// DefaultF8 holds the default value on creation for the "f8" field.
	DefaultF8 string
	// DefaultF9 holds the default value on creation for the "f9" field.
	DefaultF9 string
	// DefaultF10 holds the default value on creation for the "f10" field.
	DefaultF10 string
	// DefaultF11 holds the default value on creation for the "f11" field.
	DefaultF11 string
	// DefaultF12 holds the default value on creation for the "f12" field.
	DefaultF12 string
	// DefaultF13 holds the default value on creation for the "f13" field.
	DefaultF13 string
	// DefaultF14 holds the default value on creation for the "f14" field.
	DefaultF14 string
	// DefaultF15 holds the default value on creation for the "f15" field.
	DefaultF15 string
	// DefaultF16 holds the default value on creation for the "f16" field.
	DefaultF16 string
	// DefaultF17 holds the default value on creation for the "f17" field.
	DefaultF17 string
	// DefaultF18 holds the default value on creation for the "f18" field.
	DefaultF18 string
	// DefaultF19 holds the default value on creation for the "f19" field.
	DefaultF19 string
	// DefaultF20 holds the default value on creation for the "f20" field.
	DefaultF20 string
	// DefaultF21 holds the default value on creation for the "f21" field.
	DefaultF21 string
	// DefaultF22 holds the default value on creation for the "f22" field.
	DefaultF22 string
)

// OrderOption defines the ordering options for the Class queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByClassName orders the results by the class_name field.
func ByClassName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClassName, opts...).ToFunc()
}

// ByF1 orders the results by the f1 field.
func ByF1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF1, opts...).ToFunc()
}

// ByF2 orders the results by the f2 field.
func ByF2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF2, opts...).ToFunc()
}

// ByF3 orders the results by the f3 field.
func ByF3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF3, opts...).ToFunc()
}

// ByF4 orders the results by the f4 field.
func ByF4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF4, opts...).ToFunc()
}

// ByF5 orders the results by the f5 field.
func ByF5(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF5, opts...).ToFunc()
}

// ByF6 orders the results by the f6 field.
func ByF6(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF6, opts...).ToFunc()
}

// ByF7 orders the results by the f7 field.
func ByF7(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF7, opts...).ToFunc()
}

// ByF8 orders the results by the f8 field.
func ByF8(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF8, opts...).ToFunc()
}

// ByF9 orders the results by the f9 field.
func ByF9(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF9, opts...).ToFunc()
}

// ByF10 orders the results by the f10 field.
func ByF10(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF10, opts...).ToFunc()
}

// ByF11 orders the results by the f11 field.
func ByF11(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF11, opts...).ToFunc()
}

// ByF12 orders the results by the f12 field.
func ByF12(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF12, opts...).ToFunc()
}

// ByF13 orders the results by the f13 field.
func ByF13(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF13, opts...).ToFunc()
}

// ByF14 orders the results by the f14 field.
func ByF14(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF14, opts...).ToFunc()
}

// ByF15 orders the results by the f15 field.
func ByF15(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF15, opts...).ToFunc()
}

// ByF16 orders the results by the f16 field.
func ByF16(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF16, opts...).ToFunc()
}

// ByF17 orders the results by the f17 field.
func ByF17(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF17, opts...).ToFunc()
}

// ByF18 orders the results by the f18 field.
func ByF18(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF18, opts...).ToFunc()
}

// ByF19 orders the results by the f19 field.
func ByF19(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF19, opts...).ToFunc()
}

// ByF20 orders the results by the f20 field.
func ByF20(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF20, opts...).ToFunc()
}

// ByF21 orders the results by the f21 field.
func ByF21(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF21, opts...).ToFunc()
}

// ByF22 orders the results by the f22 field.
func ByF22(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldF22, opts...).ToFunc()
}
