// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/danielhookx/go_skill/exercise/ent/ent/class"
	"github.com/danielhookx/go_skill/exercise/ent/ent/predicate"
)

// ClassUpdate is the builder for updating Class entities.
type ClassUpdate struct {
	config
	hooks    []Hook
	mutation *ClassMutation
}

// Where appends a list predicates to the ClassUpdate builder.
func (cu *ClassUpdate) Where(ps ...predicate.Class) *ClassUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ClassUpdate) SetName(s string) *ClassUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetClassName sets the "class_name" field.
func (cu *ClassUpdate) SetClassName(s string) *ClassUpdate {
	cu.mutation.SetClassName(s)
	return cu
}

// SetF1 sets the "f1" field.
func (cu *ClassUpdate) SetF1(s string) *ClassUpdate {
	cu.mutation.SetF1(s)
	return cu
}

// SetNillableF1 sets the "f1" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF1(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF1(*s)
	}
	return cu
}

// SetF2 sets the "f2" field.
func (cu *ClassUpdate) SetF2(s string) *ClassUpdate {
	cu.mutation.SetF2(s)
	return cu
}

// SetNillableF2 sets the "f2" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF2(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF2(*s)
	}
	return cu
}

// SetF3 sets the "f3" field.
func (cu *ClassUpdate) SetF3(s string) *ClassUpdate {
	cu.mutation.SetF3(s)
	return cu
}

// SetNillableF3 sets the "f3" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF3(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF3(*s)
	}
	return cu
}

// SetF4 sets the "f4" field.
func (cu *ClassUpdate) SetF4(s string) *ClassUpdate {
	cu.mutation.SetF4(s)
	return cu
}

// SetNillableF4 sets the "f4" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF4(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF4(*s)
	}
	return cu
}

// SetF5 sets the "f5" field.
func (cu *ClassUpdate) SetF5(s string) *ClassUpdate {
	cu.mutation.SetF5(s)
	return cu
}

// SetNillableF5 sets the "f5" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF5(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF5(*s)
	}
	return cu
}

// SetF6 sets the "f6" field.
func (cu *ClassUpdate) SetF6(s string) *ClassUpdate {
	cu.mutation.SetF6(s)
	return cu
}

// SetNillableF6 sets the "f6" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF6(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF6(*s)
	}
	return cu
}

// SetF7 sets the "f7" field.
func (cu *ClassUpdate) SetF7(s string) *ClassUpdate {
	cu.mutation.SetF7(s)
	return cu
}

// SetNillableF7 sets the "f7" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF7(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF7(*s)
	}
	return cu
}

// SetF8 sets the "f8" field.
func (cu *ClassUpdate) SetF8(s string) *ClassUpdate {
	cu.mutation.SetF8(s)
	return cu
}

// SetNillableF8 sets the "f8" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF8(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF8(*s)
	}
	return cu
}

// SetF9 sets the "f9" field.
func (cu *ClassUpdate) SetF9(s string) *ClassUpdate {
	cu.mutation.SetF9(s)
	return cu
}

// SetNillableF9 sets the "f9" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF9(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF9(*s)
	}
	return cu
}

// SetF10 sets the "f10" field.
func (cu *ClassUpdate) SetF10(s string) *ClassUpdate {
	cu.mutation.SetF10(s)
	return cu
}

// SetNillableF10 sets the "f10" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF10(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF10(*s)
	}
	return cu
}

// SetF11 sets the "f11" field.
func (cu *ClassUpdate) SetF11(s string) *ClassUpdate {
	cu.mutation.SetF11(s)
	return cu
}

// SetNillableF11 sets the "f11" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF11(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF11(*s)
	}
	return cu
}

// SetF12 sets the "f12" field.
func (cu *ClassUpdate) SetF12(s string) *ClassUpdate {
	cu.mutation.SetF12(s)
	return cu
}

// SetNillableF12 sets the "f12" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF12(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF12(*s)
	}
	return cu
}

// SetF13 sets the "f13" field.
func (cu *ClassUpdate) SetF13(s string) *ClassUpdate {
	cu.mutation.SetF13(s)
	return cu
}

// SetNillableF13 sets the "f13" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF13(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF13(*s)
	}
	return cu
}

// SetF14 sets the "f14" field.
func (cu *ClassUpdate) SetF14(s string) *ClassUpdate {
	cu.mutation.SetF14(s)
	return cu
}

// SetNillableF14 sets the "f14" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF14(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF14(*s)
	}
	return cu
}

// SetF15 sets the "f15" field.
func (cu *ClassUpdate) SetF15(s string) *ClassUpdate {
	cu.mutation.SetF15(s)
	return cu
}

// SetNillableF15 sets the "f15" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF15(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF15(*s)
	}
	return cu
}

// SetF16 sets the "f16" field.
func (cu *ClassUpdate) SetF16(s string) *ClassUpdate {
	cu.mutation.SetF16(s)
	return cu
}

// SetNillableF16 sets the "f16" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF16(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF16(*s)
	}
	return cu
}

// SetF17 sets the "f17" field.
func (cu *ClassUpdate) SetF17(s string) *ClassUpdate {
	cu.mutation.SetF17(s)
	return cu
}

// SetNillableF17 sets the "f17" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF17(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF17(*s)
	}
	return cu
}

// SetF18 sets the "f18" field.
func (cu *ClassUpdate) SetF18(s string) *ClassUpdate {
	cu.mutation.SetF18(s)
	return cu
}

// SetNillableF18 sets the "f18" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF18(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF18(*s)
	}
	return cu
}

// SetF19 sets the "f19" field.
func (cu *ClassUpdate) SetF19(s string) *ClassUpdate {
	cu.mutation.SetF19(s)
	return cu
}

// SetNillableF19 sets the "f19" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF19(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF19(*s)
	}
	return cu
}

// SetF20 sets the "f20" field.
func (cu *ClassUpdate) SetF20(s string) *ClassUpdate {
	cu.mutation.SetF20(s)
	return cu
}

// SetNillableF20 sets the "f20" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF20(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF20(*s)
	}
	return cu
}

// SetF21 sets the "f21" field.
func (cu *ClassUpdate) SetF21(s string) *ClassUpdate {
	cu.mutation.SetF21(s)
	return cu
}

// SetNillableF21 sets the "f21" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF21(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF21(*s)
	}
	return cu
}

// SetF22 sets the "f22" field.
func (cu *ClassUpdate) SetF22(s string) *ClassUpdate {
	cu.mutation.SetF22(s)
	return cu
}

// SetNillableF22 sets the "f22" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableF22(s *string) *ClassUpdate {
	if s != nil {
		cu.SetF22(*s)
	}
	return cu
}

// Mutation returns the ClassMutation object of the builder.
func (cu *ClassUpdate) Mutation() *ClassMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClassUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClassUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClassUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClassUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.ClassName(); ok {
		_spec.SetField(class.FieldClassName, field.TypeString, value)
	}
	if value, ok := cu.mutation.F1(); ok {
		_spec.SetField(class.FieldF1, field.TypeString, value)
	}
	if value, ok := cu.mutation.F2(); ok {
		_spec.SetField(class.FieldF2, field.TypeString, value)
	}
	if value, ok := cu.mutation.F3(); ok {
		_spec.SetField(class.FieldF3, field.TypeString, value)
	}
	if value, ok := cu.mutation.F4(); ok {
		_spec.SetField(class.FieldF4, field.TypeString, value)
	}
	if value, ok := cu.mutation.F5(); ok {
		_spec.SetField(class.FieldF5, field.TypeString, value)
	}
	if value, ok := cu.mutation.F6(); ok {
		_spec.SetField(class.FieldF6, field.TypeString, value)
	}
	if value, ok := cu.mutation.F7(); ok {
		_spec.SetField(class.FieldF7, field.TypeString, value)
	}
	if value, ok := cu.mutation.F8(); ok {
		_spec.SetField(class.FieldF8, field.TypeString, value)
	}
	if value, ok := cu.mutation.F9(); ok {
		_spec.SetField(class.FieldF9, field.TypeString, value)
	}
	if value, ok := cu.mutation.F10(); ok {
		_spec.SetField(class.FieldF10, field.TypeString, value)
	}
	if value, ok := cu.mutation.F11(); ok {
		_spec.SetField(class.FieldF11, field.TypeString, value)
	}
	if value, ok := cu.mutation.F12(); ok {
		_spec.SetField(class.FieldF12, field.TypeString, value)
	}
	if value, ok := cu.mutation.F13(); ok {
		_spec.SetField(class.FieldF13, field.TypeString, value)
	}
	if value, ok := cu.mutation.F14(); ok {
		_spec.SetField(class.FieldF14, field.TypeString, value)
	}
	if value, ok := cu.mutation.F15(); ok {
		_spec.SetField(class.FieldF15, field.TypeString, value)
	}
	if value, ok := cu.mutation.F16(); ok {
		_spec.SetField(class.FieldF16, field.TypeString, value)
	}
	if value, ok := cu.mutation.F17(); ok {
		_spec.SetField(class.FieldF17, field.TypeString, value)
	}
	if value, ok := cu.mutation.F18(); ok {
		_spec.SetField(class.FieldF18, field.TypeString, value)
	}
	if value, ok := cu.mutation.F19(); ok {
		_spec.SetField(class.FieldF19, field.TypeString, value)
	}
	if value, ok := cu.mutation.F20(); ok {
		_spec.SetField(class.FieldF20, field.TypeString, value)
	}
	if value, ok := cu.mutation.F21(); ok {
		_spec.SetField(class.FieldF21, field.TypeString, value)
	}
	if value, ok := cu.mutation.F22(); ok {
		_spec.SetField(class.FieldF22, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClassUpdateOne is the builder for updating a single Class entity.
type ClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassMutation
}

// SetName sets the "name" field.
func (cuo *ClassUpdateOne) SetName(s string) *ClassUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetClassName sets the "class_name" field.
func (cuo *ClassUpdateOne) SetClassName(s string) *ClassUpdateOne {
	cuo.mutation.SetClassName(s)
	return cuo
}

// SetF1 sets the "f1" field.
func (cuo *ClassUpdateOne) SetF1(s string) *ClassUpdateOne {
	cuo.mutation.SetF1(s)
	return cuo
}

// SetNillableF1 sets the "f1" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF1(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF1(*s)
	}
	return cuo
}

// SetF2 sets the "f2" field.
func (cuo *ClassUpdateOne) SetF2(s string) *ClassUpdateOne {
	cuo.mutation.SetF2(s)
	return cuo
}

// SetNillableF2 sets the "f2" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF2(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF2(*s)
	}
	return cuo
}

// SetF3 sets the "f3" field.
func (cuo *ClassUpdateOne) SetF3(s string) *ClassUpdateOne {
	cuo.mutation.SetF3(s)
	return cuo
}

// SetNillableF3 sets the "f3" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF3(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF3(*s)
	}
	return cuo
}

// SetF4 sets the "f4" field.
func (cuo *ClassUpdateOne) SetF4(s string) *ClassUpdateOne {
	cuo.mutation.SetF4(s)
	return cuo
}

// SetNillableF4 sets the "f4" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF4(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF4(*s)
	}
	return cuo
}

// SetF5 sets the "f5" field.
func (cuo *ClassUpdateOne) SetF5(s string) *ClassUpdateOne {
	cuo.mutation.SetF5(s)
	return cuo
}

// SetNillableF5 sets the "f5" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF5(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF5(*s)
	}
	return cuo
}

// SetF6 sets the "f6" field.
func (cuo *ClassUpdateOne) SetF6(s string) *ClassUpdateOne {
	cuo.mutation.SetF6(s)
	return cuo
}

// SetNillableF6 sets the "f6" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF6(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF6(*s)
	}
	return cuo
}

// SetF7 sets the "f7" field.
func (cuo *ClassUpdateOne) SetF7(s string) *ClassUpdateOne {
	cuo.mutation.SetF7(s)
	return cuo
}

// SetNillableF7 sets the "f7" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF7(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF7(*s)
	}
	return cuo
}

// SetF8 sets the "f8" field.
func (cuo *ClassUpdateOne) SetF8(s string) *ClassUpdateOne {
	cuo.mutation.SetF8(s)
	return cuo
}

// SetNillableF8 sets the "f8" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF8(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF8(*s)
	}
	return cuo
}

// SetF9 sets the "f9" field.
func (cuo *ClassUpdateOne) SetF9(s string) *ClassUpdateOne {
	cuo.mutation.SetF9(s)
	return cuo
}

// SetNillableF9 sets the "f9" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF9(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF9(*s)
	}
	return cuo
}

// SetF10 sets the "f10" field.
func (cuo *ClassUpdateOne) SetF10(s string) *ClassUpdateOne {
	cuo.mutation.SetF10(s)
	return cuo
}

// SetNillableF10 sets the "f10" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF10(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF10(*s)
	}
	return cuo
}

// SetF11 sets the "f11" field.
func (cuo *ClassUpdateOne) SetF11(s string) *ClassUpdateOne {
	cuo.mutation.SetF11(s)
	return cuo
}

// SetNillableF11 sets the "f11" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF11(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF11(*s)
	}
	return cuo
}

// SetF12 sets the "f12" field.
func (cuo *ClassUpdateOne) SetF12(s string) *ClassUpdateOne {
	cuo.mutation.SetF12(s)
	return cuo
}

// SetNillableF12 sets the "f12" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF12(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF12(*s)
	}
	return cuo
}

// SetF13 sets the "f13" field.
func (cuo *ClassUpdateOne) SetF13(s string) *ClassUpdateOne {
	cuo.mutation.SetF13(s)
	return cuo
}

// SetNillableF13 sets the "f13" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF13(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF13(*s)
	}
	return cuo
}

// SetF14 sets the "f14" field.
func (cuo *ClassUpdateOne) SetF14(s string) *ClassUpdateOne {
	cuo.mutation.SetF14(s)
	return cuo
}

// SetNillableF14 sets the "f14" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF14(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF14(*s)
	}
	return cuo
}

// SetF15 sets the "f15" field.
func (cuo *ClassUpdateOne) SetF15(s string) *ClassUpdateOne {
	cuo.mutation.SetF15(s)
	return cuo
}

// SetNillableF15 sets the "f15" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF15(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF15(*s)
	}
	return cuo
}

// SetF16 sets the "f16" field.
func (cuo *ClassUpdateOne) SetF16(s string) *ClassUpdateOne {
	cuo.mutation.SetF16(s)
	return cuo
}

// SetNillableF16 sets the "f16" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF16(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF16(*s)
	}
	return cuo
}

// SetF17 sets the "f17" field.
func (cuo *ClassUpdateOne) SetF17(s string) *ClassUpdateOne {
	cuo.mutation.SetF17(s)
	return cuo
}

// SetNillableF17 sets the "f17" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF17(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF17(*s)
	}
	return cuo
}

// SetF18 sets the "f18" field.
func (cuo *ClassUpdateOne) SetF18(s string) *ClassUpdateOne {
	cuo.mutation.SetF18(s)
	return cuo
}

// SetNillableF18 sets the "f18" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF18(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF18(*s)
	}
	return cuo
}

// SetF19 sets the "f19" field.
func (cuo *ClassUpdateOne) SetF19(s string) *ClassUpdateOne {
	cuo.mutation.SetF19(s)
	return cuo
}

// SetNillableF19 sets the "f19" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF19(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF19(*s)
	}
	return cuo
}

// SetF20 sets the "f20" field.
func (cuo *ClassUpdateOne) SetF20(s string) *ClassUpdateOne {
	cuo.mutation.SetF20(s)
	return cuo
}

// SetNillableF20 sets the "f20" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF20(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF20(*s)
	}
	return cuo
}

// SetF21 sets the "f21" field.
func (cuo *ClassUpdateOne) SetF21(s string) *ClassUpdateOne {
	cuo.mutation.SetF21(s)
	return cuo
}

// SetNillableF21 sets the "f21" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF21(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF21(*s)
	}
	return cuo
}

// SetF22 sets the "f22" field.
func (cuo *ClassUpdateOne) SetF22(s string) *ClassUpdateOne {
	cuo.mutation.SetF22(s)
	return cuo
}

// SetNillableF22 sets the "f22" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableF22(s *string) *ClassUpdateOne {
	if s != nil {
		cuo.SetF22(*s)
	}
	return cuo
}

// Mutation returns the ClassMutation object of the builder.
func (cuo *ClassUpdateOne) Mutation() *ClassMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ClassUpdate builder.
func (cuo *ClassUpdateOne) Where(ps ...predicate.Class) *ClassUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClassUpdateOne) Select(field string, fields ...string) *ClassUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Class entity.
func (cuo *ClassUpdateOne) Save(ctx context.Context) (*Class, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClassUpdateOne) SaveX(ctx context.Context) *Class {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClassUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClassUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClassUpdateOne) sqlSave(ctx context.Context) (_node *Class, err error) {
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Class.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class.FieldID)
		for _, f := range fields {
			if !class.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != class.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(class.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ClassName(); ok {
		_spec.SetField(class.FieldClassName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F1(); ok {
		_spec.SetField(class.FieldF1, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F2(); ok {
		_spec.SetField(class.FieldF2, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F3(); ok {
		_spec.SetField(class.FieldF3, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F4(); ok {
		_spec.SetField(class.FieldF4, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F5(); ok {
		_spec.SetField(class.FieldF5, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F6(); ok {
		_spec.SetField(class.FieldF6, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F7(); ok {
		_spec.SetField(class.FieldF7, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F8(); ok {
		_spec.SetField(class.FieldF8, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F9(); ok {
		_spec.SetField(class.FieldF9, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F10(); ok {
		_spec.SetField(class.FieldF10, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F11(); ok {
		_spec.SetField(class.FieldF11, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F12(); ok {
		_spec.SetField(class.FieldF12, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F13(); ok {
		_spec.SetField(class.FieldF13, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F14(); ok {
		_spec.SetField(class.FieldF14, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F15(); ok {
		_spec.SetField(class.FieldF15, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F16(); ok {
		_spec.SetField(class.FieldF16, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F17(); ok {
		_spec.SetField(class.FieldF17, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F18(); ok {
		_spec.SetField(class.FieldF18, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F19(); ok {
		_spec.SetField(class.FieldF19, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F20(); ok {
		_spec.SetField(class.FieldF20, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F21(); ok {
		_spec.SetField(class.FieldF21, field.TypeString, value)
	}
	if value, ok := cuo.mutation.F22(); ok {
		_spec.SetField(class.FieldF22, field.TypeString, value)
	}
	_node = &Class{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
