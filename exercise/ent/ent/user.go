// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/danielhookx/go_skill/exercise/ent/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// NickName holds the value of the "nick_name" field.
	NickName string `json:"nick_name,omitempty"`
	// F1 holds the value of the "f1" field.
	F1 string `json:"f1,omitempty"`
	// F2 holds the value of the "f2" field.
	F2 string `json:"f2,omitempty"`
	// F3 holds the value of the "f3" field.
	F3 string `json:"f3,omitempty"`
	// F4 holds the value of the "f4" field.
	F4 string `json:"f4,omitempty"`
	// F5 holds the value of the "f5" field.
	F5 string `json:"f5,omitempty"`
	// F6 holds the value of the "f6" field.
	F6 string `json:"f6,omitempty"`
	// F7 holds the value of the "f7" field.
	F7 string `json:"f7,omitempty"`
	// F8 holds the value of the "f8" field.
	F8 string `json:"f8,omitempty"`
	// F9 holds the value of the "f9" field.
	F9 string `json:"f9,omitempty"`
	// F10 holds the value of the "f10" field.
	F10 string `json:"f10,omitempty"`
	// F11 holds the value of the "f11" field.
	F11 string `json:"f11,omitempty"`
	// F12 holds the value of the "f12" field.
	F12 string `json:"f12,omitempty"`
	// F13 holds the value of the "f13" field.
	F13 string `json:"f13,omitempty"`
	// F14 holds the value of the "f14" field.
	F14 string `json:"f14,omitempty"`
	// F15 holds the value of the "f15" field.
	F15 string `json:"f15,omitempty"`
	// F16 holds the value of the "f16" field.
	F16 string `json:"f16,omitempty"`
	// F17 holds the value of the "f17" field.
	F17 string `json:"f17,omitempty"`
	// F18 holds the value of the "f18" field.
	F18 string `json:"f18,omitempty"`
	// F19 holds the value of the "f19" field.
	F19 string `json:"f19,omitempty"`
	// F20 holds the value of the "f20" field.
	F20 string `json:"f20,omitempty"`
	// F21 holds the value of the "f21" field.
	F21 string `json:"f21,omitempty"`
	// F22 holds the value of the "f22" field.
	F22          string `json:"f22,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldNickName, user.FieldF1, user.FieldF2, user.FieldF3, user.FieldF4, user.FieldF5, user.FieldF6, user.FieldF7, user.FieldF8, user.FieldF9, user.FieldF10, user.FieldF11, user.FieldF12, user.FieldF13, user.FieldF14, user.FieldF15, user.FieldF16, user.FieldF17, user.FieldF18, user.FieldF19, user.FieldF20, user.FieldF21, user.FieldF22:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nick_name", values[i])
			} else if value.Valid {
				u.NickName = value.String
			}
		case user.FieldF1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f1", values[i])
			} else if value.Valid {
				u.F1 = value.String
			}
		case user.FieldF2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f2", values[i])
			} else if value.Valid {
				u.F2 = value.String
			}
		case user.FieldF3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f3", values[i])
			} else if value.Valid {
				u.F3 = value.String
			}
		case user.FieldF4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f4", values[i])
			} else if value.Valid {
				u.F4 = value.String
			}
		case user.FieldF5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f5", values[i])
			} else if value.Valid {
				u.F5 = value.String
			}
		case user.FieldF6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f6", values[i])
			} else if value.Valid {
				u.F6 = value.String
			}
		case user.FieldF7:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f7", values[i])
			} else if value.Valid {
				u.F7 = value.String
			}
		case user.FieldF8:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f8", values[i])
			} else if value.Valid {
				u.F8 = value.String
			}
		case user.FieldF9:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f9", values[i])
			} else if value.Valid {
				u.F9 = value.String
			}
		case user.FieldF10:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f10", values[i])
			} else if value.Valid {
				u.F10 = value.String
			}
		case user.FieldF11:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f11", values[i])
			} else if value.Valid {
				u.F11 = value.String
			}
		case user.FieldF12:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f12", values[i])
			} else if value.Valid {
				u.F12 = value.String
			}
		case user.FieldF13:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f13", values[i])
			} else if value.Valid {
				u.F13 = value.String
			}
		case user.FieldF14:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f14", values[i])
			} else if value.Valid {
				u.F14 = value.String
			}
		case user.FieldF15:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f15", values[i])
			} else if value.Valid {
				u.F15 = value.String
			}
		case user.FieldF16:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f16", values[i])
			} else if value.Valid {
				u.F16 = value.String
			}
		case user.FieldF17:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f17", values[i])
			} else if value.Valid {
				u.F17 = value.String
			}
		case user.FieldF18:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f18", values[i])
			} else if value.Valid {
				u.F18 = value.String
			}
		case user.FieldF19:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f19", values[i])
			} else if value.Valid {
				u.F19 = value.String
			}
		case user.FieldF20:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f20", values[i])
			} else if value.Valid {
				u.F20 = value.String
			}
		case user.FieldF21:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f21", values[i])
			} else if value.Valid {
				u.F21 = value.String
			}
		case user.FieldF22:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f22", values[i])
			} else if value.Valid {
				u.F22 = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("nick_name=")
	builder.WriteString(u.NickName)
	builder.WriteString(", ")
	builder.WriteString("f1=")
	builder.WriteString(u.F1)
	builder.WriteString(", ")
	builder.WriteString("f2=")
	builder.WriteString(u.F2)
	builder.WriteString(", ")
	builder.WriteString("f3=")
	builder.WriteString(u.F3)
	builder.WriteString(", ")
	builder.WriteString("f4=")
	builder.WriteString(u.F4)
	builder.WriteString(", ")
	builder.WriteString("f5=")
	builder.WriteString(u.F5)
	builder.WriteString(", ")
	builder.WriteString("f6=")
	builder.WriteString(u.F6)
	builder.WriteString(", ")
	builder.WriteString("f7=")
	builder.WriteString(u.F7)
	builder.WriteString(", ")
	builder.WriteString("f8=")
	builder.WriteString(u.F8)
	builder.WriteString(", ")
	builder.WriteString("f9=")
	builder.WriteString(u.F9)
	builder.WriteString(", ")
	builder.WriteString("f10=")
	builder.WriteString(u.F10)
	builder.WriteString(", ")
	builder.WriteString("f11=")
	builder.WriteString(u.F11)
	builder.WriteString(", ")
	builder.WriteString("f12=")
	builder.WriteString(u.F12)
	builder.WriteString(", ")
	builder.WriteString("f13=")
	builder.WriteString(u.F13)
	builder.WriteString(", ")
	builder.WriteString("f14=")
	builder.WriteString(u.F14)
	builder.WriteString(", ")
	builder.WriteString("f15=")
	builder.WriteString(u.F15)
	builder.WriteString(", ")
	builder.WriteString("f16=")
	builder.WriteString(u.F16)
	builder.WriteString(", ")
	builder.WriteString("f17=")
	builder.WriteString(u.F17)
	builder.WriteString(", ")
	builder.WriteString("f18=")
	builder.WriteString(u.F18)
	builder.WriteString(", ")
	builder.WriteString("f19=")
	builder.WriteString(u.F19)
	builder.WriteString(", ")
	builder.WriteString("f20=")
	builder.WriteString(u.F20)
	builder.WriteString(", ")
	builder.WriteString("f21=")
	builder.WriteString(u.F21)
	builder.WriteString(", ")
	builder.WriteString("f22=")
	builder.WriteString(u.F22)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
