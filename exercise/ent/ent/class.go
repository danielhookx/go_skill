// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/danielhookx/go_skill/exercise/ent/ent/class"
)

// Class is the model entity for the Class schema.
type Class struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ClassName holds the value of the "class_name" field.
	ClassName string `json:"class_name,omitempty"`
	// F1 holds the value of the "f1" field.
	F1 string `json:"f1,omitempty"`
	// F2 holds the value of the "f2" field.
	F2 string `json:"f2,omitempty"`
	// F3 holds the value of the "f3" field.
	F3 string `json:"f3,omitempty"`
	// F4 holds the value of the "f4" field.
	F4 string `json:"f4,omitempty"`
	// F5 holds the value of the "f5" field.
	F5 string `json:"f5,omitempty"`
	// F6 holds the value of the "f6" field.
	F6 string `json:"f6,omitempty"`
	// F7 holds the value of the "f7" field.
	F7 string `json:"f7,omitempty"`
	// F8 holds the value of the "f8" field.
	F8 string `json:"f8,omitempty"`
	// F9 holds the value of the "f9" field.
	F9 string `json:"f9,omitempty"`
	// F10 holds the value of the "f10" field.
	F10 string `json:"f10,omitempty"`
	// F11 holds the value of the "f11" field.
	F11 string `json:"f11,omitempty"`
	// F12 holds the value of the "f12" field.
	F12 string `json:"f12,omitempty"`
	// F13 holds the value of the "f13" field.
	F13 string `json:"f13,omitempty"`
	// F14 holds the value of the "f14" field.
	F14 string `json:"f14,omitempty"`
	// F15 holds the value of the "f15" field.
	F15 string `json:"f15,omitempty"`
	// F16 holds the value of the "f16" field.
	F16 string `json:"f16,omitempty"`
	// F17 holds the value of the "f17" field.
	F17 string `json:"f17,omitempty"`
	// F18 holds the value of the "f18" field.
	F18 string `json:"f18,omitempty"`
	// F19 holds the value of the "f19" field.
	F19 string `json:"f19,omitempty"`
	// F20 holds the value of the "f20" field.
	F20 string `json:"f20,omitempty"`
	// F21 holds the value of the "f21" field.
	F21 string `json:"f21,omitempty"`
	// F22 holds the value of the "f22" field.
	F22          string `json:"f22,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Class) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case class.FieldID:
			values[i] = new(sql.NullInt64)
		case class.FieldName, class.FieldClassName, class.FieldF1, class.FieldF2, class.FieldF3, class.FieldF4, class.FieldF5, class.FieldF6, class.FieldF7, class.FieldF8, class.FieldF9, class.FieldF10, class.FieldF11, class.FieldF12, class.FieldF13, class.FieldF14, class.FieldF15, class.FieldF16, class.FieldF17, class.FieldF18, class.FieldF19, class.FieldF20, class.FieldF21, class.FieldF22:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Class fields.
func (c *Class) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case class.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case class.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case class.FieldClassName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_name", values[i])
			} else if value.Valid {
				c.ClassName = value.String
			}
		case class.FieldF1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f1", values[i])
			} else if value.Valid {
				c.F1 = value.String
			}
		case class.FieldF2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f2", values[i])
			} else if value.Valid {
				c.F2 = value.String
			}
		case class.FieldF3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f3", values[i])
			} else if value.Valid {
				c.F3 = value.String
			}
		case class.FieldF4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f4", values[i])
			} else if value.Valid {
				c.F4 = value.String
			}
		case class.FieldF5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f5", values[i])
			} else if value.Valid {
				c.F5 = value.String
			}
		case class.FieldF6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f6", values[i])
			} else if value.Valid {
				c.F6 = value.String
			}
		case class.FieldF7:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f7", values[i])
			} else if value.Valid {
				c.F7 = value.String
			}
		case class.FieldF8:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f8", values[i])
			} else if value.Valid {
				c.F8 = value.String
			}
		case class.FieldF9:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f9", values[i])
			} else if value.Valid {
				c.F9 = value.String
			}
		case class.FieldF10:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f10", values[i])
			} else if value.Valid {
				c.F10 = value.String
			}
		case class.FieldF11:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f11", values[i])
			} else if value.Valid {
				c.F11 = value.String
			}
		case class.FieldF12:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f12", values[i])
			} else if value.Valid {
				c.F12 = value.String
			}
		case class.FieldF13:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f13", values[i])
			} else if value.Valid {
				c.F13 = value.String
			}
		case class.FieldF14:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f14", values[i])
			} else if value.Valid {
				c.F14 = value.String
			}
		case class.FieldF15:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f15", values[i])
			} else if value.Valid {
				c.F15 = value.String
			}
		case class.FieldF16:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f16", values[i])
			} else if value.Valid {
				c.F16 = value.String
			}
		case class.FieldF17:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f17", values[i])
			} else if value.Valid {
				c.F17 = value.String
			}
		case class.FieldF18:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f18", values[i])
			} else if value.Valid {
				c.F18 = value.String
			}
		case class.FieldF19:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f19", values[i])
			} else if value.Valid {
				c.F19 = value.String
			}
		case class.FieldF20:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f20", values[i])
			} else if value.Valid {
				c.F20 = value.String
			}
		case class.FieldF21:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f21", values[i])
			} else if value.Valid {
				c.F21 = value.String
			}
		case class.FieldF22:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field f22", values[i])
			} else if value.Valid {
				c.F22 = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Class.
// This includes values selected through modifiers, order, etc.
func (c *Class) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Class.
// Note that you need to call Class.Unwrap() before calling this method if this Class
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Class) Update() *ClassUpdateOne {
	return NewClassClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Class entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Class) Unwrap() *Class {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Class is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Class) String() string {
	var builder strings.Builder
	builder.WriteString("Class(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("class_name=")
	builder.WriteString(c.ClassName)
	builder.WriteString(", ")
	builder.WriteString("f1=")
	builder.WriteString(c.F1)
	builder.WriteString(", ")
	builder.WriteString("f2=")
	builder.WriteString(c.F2)
	builder.WriteString(", ")
	builder.WriteString("f3=")
	builder.WriteString(c.F3)
	builder.WriteString(", ")
	builder.WriteString("f4=")
	builder.WriteString(c.F4)
	builder.WriteString(", ")
	builder.WriteString("f5=")
	builder.WriteString(c.F5)
	builder.WriteString(", ")
	builder.WriteString("f6=")
	builder.WriteString(c.F6)
	builder.WriteString(", ")
	builder.WriteString("f7=")
	builder.WriteString(c.F7)
	builder.WriteString(", ")
	builder.WriteString("f8=")
	builder.WriteString(c.F8)
	builder.WriteString(", ")
	builder.WriteString("f9=")
	builder.WriteString(c.F9)
	builder.WriteString(", ")
	builder.WriteString("f10=")
	builder.WriteString(c.F10)
	builder.WriteString(", ")
	builder.WriteString("f11=")
	builder.WriteString(c.F11)
	builder.WriteString(", ")
	builder.WriteString("f12=")
	builder.WriteString(c.F12)
	builder.WriteString(", ")
	builder.WriteString("f13=")
	builder.WriteString(c.F13)
	builder.WriteString(", ")
	builder.WriteString("f14=")
	builder.WriteString(c.F14)
	builder.WriteString(", ")
	builder.WriteString("f15=")
	builder.WriteString(c.F15)
	builder.WriteString(", ")
	builder.WriteString("f16=")
	builder.WriteString(c.F16)
	builder.WriteString(", ")
	builder.WriteString("f17=")
	builder.WriteString(c.F17)
	builder.WriteString(", ")
	builder.WriteString("f18=")
	builder.WriteString(c.F18)
	builder.WriteString(", ")
	builder.WriteString("f19=")
	builder.WriteString(c.F19)
	builder.WriteString(", ")
	builder.WriteString("f20=")
	builder.WriteString(c.F20)
	builder.WriteString(", ")
	builder.WriteString("f21=")
	builder.WriteString(c.F21)
	builder.WriteString(", ")
	builder.WriteString("f22=")
	builder.WriteString(c.F22)
	builder.WriteByte(')')
	return builder.String()
}

// Classes is a parsable slice of Class.
type Classes []*Class
