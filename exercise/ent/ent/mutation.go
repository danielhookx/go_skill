// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/danielhookx/go_skill/exercise/ent/ent/class"
	"github.com/danielhookx/go_skill/exercise/ent/ent/predicate"
	"github.com/danielhookx/go_skill/exercise/ent/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeClass = "Class"
	TypeUser  = "User"
)

// ClassMutation represents an operation that mutates the Class nodes in the graph.
type ClassMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	class_name    *string
	f1            *string
	f2            *string
	f3            *string
	f4            *string
	f5            *string
	f6            *string
	f7            *string
	f8            *string
	f9            *string
	f10           *string
	f11           *string
	f12           *string
	f13           *string
	f14           *string
	f15           *string
	f16           *string
	f17           *string
	f18           *string
	f19           *string
	f20           *string
	f21           *string
	f22           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Class, error)
	predicates    []predicate.Class
}

var _ ent.Mutation = (*ClassMutation)(nil)

// classOption allows management of the mutation configuration using functional options.
type classOption func(*ClassMutation)

// newClassMutation creates new mutation for the Class entity.
func newClassMutation(c config, op Op, opts ...classOption) *ClassMutation {
	m := &ClassMutation{
		config:        c,
		op:            op,
		typ:           TypeClass,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClassID sets the ID field of the mutation.
func withClassID(id int) classOption {
	return func(m *ClassMutation) {
		var (
			err   error
			once  sync.Once
			value *Class
		)
		m.oldValue = func(ctx context.Context) (*Class, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Class.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClass sets the old Class of the mutation.
func withClass(node *Class) classOption {
	return func(m *ClassMutation) {
		m.oldValue = func(context.Context) (*Class, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClassMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClassMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClassMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClassMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Class.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ClassMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ClassMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ClassMutation) ResetName() {
	m.name = nil
}

// SetClassName sets the "class_name" field.
func (m *ClassMutation) SetClassName(s string) {
	m.class_name = &s
}

// ClassName returns the value of the "class_name" field in the mutation.
func (m *ClassMutation) ClassName() (r string, exists bool) {
	v := m.class_name
	if v == nil {
		return
	}
	return *v, true
}

// OldClassName returns the old "class_name" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldClassName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClassName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClassName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClassName: %w", err)
	}
	return oldValue.ClassName, nil
}

// ResetClassName resets all changes to the "class_name" field.
func (m *ClassMutation) ResetClassName() {
	m.class_name = nil
}

// SetF1 sets the "f1" field.
func (m *ClassMutation) SetF1(s string) {
	m.f1 = &s
}

// F1 returns the value of the "f1" field in the mutation.
func (m *ClassMutation) F1() (r string, exists bool) {
	v := m.f1
	if v == nil {
		return
	}
	return *v, true
}

// OldF1 returns the old "f1" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF1: %w", err)
	}
	return oldValue.F1, nil
}

// ResetF1 resets all changes to the "f1" field.
func (m *ClassMutation) ResetF1() {
	m.f1 = nil
}

// SetF2 sets the "f2" field.
func (m *ClassMutation) SetF2(s string) {
	m.f2 = &s
}

// F2 returns the value of the "f2" field in the mutation.
func (m *ClassMutation) F2() (r string, exists bool) {
	v := m.f2
	if v == nil {
		return
	}
	return *v, true
}

// OldF2 returns the old "f2" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF2: %w", err)
	}
	return oldValue.F2, nil
}

// ResetF2 resets all changes to the "f2" field.
func (m *ClassMutation) ResetF2() {
	m.f2 = nil
}

// SetF3 sets the "f3" field.
func (m *ClassMutation) SetF3(s string) {
	m.f3 = &s
}

// F3 returns the value of the "f3" field in the mutation.
func (m *ClassMutation) F3() (r string, exists bool) {
	v := m.f3
	if v == nil {
		return
	}
	return *v, true
}

// OldF3 returns the old "f3" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF3: %w", err)
	}
	return oldValue.F3, nil
}

// ResetF3 resets all changes to the "f3" field.
func (m *ClassMutation) ResetF3() {
	m.f3 = nil
}

// SetF4 sets the "f4" field.
func (m *ClassMutation) SetF4(s string) {
	m.f4 = &s
}

// F4 returns the value of the "f4" field in the mutation.
func (m *ClassMutation) F4() (r string, exists bool) {
	v := m.f4
	if v == nil {
		return
	}
	return *v, true
}

// OldF4 returns the old "f4" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF4: %w", err)
	}
	return oldValue.F4, nil
}

// ResetF4 resets all changes to the "f4" field.
func (m *ClassMutation) ResetF4() {
	m.f4 = nil
}

// SetF5 sets the "f5" field.
func (m *ClassMutation) SetF5(s string) {
	m.f5 = &s
}

// F5 returns the value of the "f5" field in the mutation.
func (m *ClassMutation) F5() (r string, exists bool) {
	v := m.f5
	if v == nil {
		return
	}
	return *v, true
}

// OldF5 returns the old "f5" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF5: %w", err)
	}
	return oldValue.F5, nil
}

// ResetF5 resets all changes to the "f5" field.
func (m *ClassMutation) ResetF5() {
	m.f5 = nil
}

// SetF6 sets the "f6" field.
func (m *ClassMutation) SetF6(s string) {
	m.f6 = &s
}

// F6 returns the value of the "f6" field in the mutation.
func (m *ClassMutation) F6() (r string, exists bool) {
	v := m.f6
	if v == nil {
		return
	}
	return *v, true
}

// OldF6 returns the old "f6" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF6: %w", err)
	}
	return oldValue.F6, nil
}

// ResetF6 resets all changes to the "f6" field.
func (m *ClassMutation) ResetF6() {
	m.f6 = nil
}

// SetF7 sets the "f7" field.
func (m *ClassMutation) SetF7(s string) {
	m.f7 = &s
}

// F7 returns the value of the "f7" field in the mutation.
func (m *ClassMutation) F7() (r string, exists bool) {
	v := m.f7
	if v == nil {
		return
	}
	return *v, true
}

// OldF7 returns the old "f7" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF7(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF7: %w", err)
	}
	return oldValue.F7, nil
}

// ResetF7 resets all changes to the "f7" field.
func (m *ClassMutation) ResetF7() {
	m.f7 = nil
}

// SetF8 sets the "f8" field.
func (m *ClassMutation) SetF8(s string) {
	m.f8 = &s
}

// F8 returns the value of the "f8" field in the mutation.
func (m *ClassMutation) F8() (r string, exists bool) {
	v := m.f8
	if v == nil {
		return
	}
	return *v, true
}

// OldF8 returns the old "f8" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF8(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF8: %w", err)
	}
	return oldValue.F8, nil
}

// ResetF8 resets all changes to the "f8" field.
func (m *ClassMutation) ResetF8() {
	m.f8 = nil
}

// SetF9 sets the "f9" field.
func (m *ClassMutation) SetF9(s string) {
	m.f9 = &s
}

// F9 returns the value of the "f9" field in the mutation.
func (m *ClassMutation) F9() (r string, exists bool) {
	v := m.f9
	if v == nil {
		return
	}
	return *v, true
}

// OldF9 returns the old "f9" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF9(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF9 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF9 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF9: %w", err)
	}
	return oldValue.F9, nil
}

// ResetF9 resets all changes to the "f9" field.
func (m *ClassMutation) ResetF9() {
	m.f9 = nil
}

// SetF10 sets the "f10" field.
func (m *ClassMutation) SetF10(s string) {
	m.f10 = &s
}

// F10 returns the value of the "f10" field in the mutation.
func (m *ClassMutation) F10() (r string, exists bool) {
	v := m.f10
	if v == nil {
		return
	}
	return *v, true
}

// OldF10 returns the old "f10" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF10(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF10 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF10 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF10: %w", err)
	}
	return oldValue.F10, nil
}

// ResetF10 resets all changes to the "f10" field.
func (m *ClassMutation) ResetF10() {
	m.f10 = nil
}

// SetF11 sets the "f11" field.
func (m *ClassMutation) SetF11(s string) {
	m.f11 = &s
}

// F11 returns the value of the "f11" field in the mutation.
func (m *ClassMutation) F11() (r string, exists bool) {
	v := m.f11
	if v == nil {
		return
	}
	return *v, true
}

// OldF11 returns the old "f11" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF11(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF11 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF11 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF11: %w", err)
	}
	return oldValue.F11, nil
}

// ResetF11 resets all changes to the "f11" field.
func (m *ClassMutation) ResetF11() {
	m.f11 = nil
}

// SetF12 sets the "f12" field.
func (m *ClassMutation) SetF12(s string) {
	m.f12 = &s
}

// F12 returns the value of the "f12" field in the mutation.
func (m *ClassMutation) F12() (r string, exists bool) {
	v := m.f12
	if v == nil {
		return
	}
	return *v, true
}

// OldF12 returns the old "f12" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF12(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF12 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF12 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF12: %w", err)
	}
	return oldValue.F12, nil
}

// ResetF12 resets all changes to the "f12" field.
func (m *ClassMutation) ResetF12() {
	m.f12 = nil
}

// SetF13 sets the "f13" field.
func (m *ClassMutation) SetF13(s string) {
	m.f13 = &s
}

// F13 returns the value of the "f13" field in the mutation.
func (m *ClassMutation) F13() (r string, exists bool) {
	v := m.f13
	if v == nil {
		return
	}
	return *v, true
}

// OldF13 returns the old "f13" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF13(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF13 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF13 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF13: %w", err)
	}
	return oldValue.F13, nil
}

// ResetF13 resets all changes to the "f13" field.
func (m *ClassMutation) ResetF13() {
	m.f13 = nil
}

// SetF14 sets the "f14" field.
func (m *ClassMutation) SetF14(s string) {
	m.f14 = &s
}

// F14 returns the value of the "f14" field in the mutation.
func (m *ClassMutation) F14() (r string, exists bool) {
	v := m.f14
	if v == nil {
		return
	}
	return *v, true
}

// OldF14 returns the old "f14" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF14(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF14 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF14 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF14: %w", err)
	}
	return oldValue.F14, nil
}

// ResetF14 resets all changes to the "f14" field.
func (m *ClassMutation) ResetF14() {
	m.f14 = nil
}

// SetF15 sets the "f15" field.
func (m *ClassMutation) SetF15(s string) {
	m.f15 = &s
}

// F15 returns the value of the "f15" field in the mutation.
func (m *ClassMutation) F15() (r string, exists bool) {
	v := m.f15
	if v == nil {
		return
	}
	return *v, true
}

// OldF15 returns the old "f15" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF15(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF15 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF15 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF15: %w", err)
	}
	return oldValue.F15, nil
}

// ResetF15 resets all changes to the "f15" field.
func (m *ClassMutation) ResetF15() {
	m.f15 = nil
}

// SetF16 sets the "f16" field.
func (m *ClassMutation) SetF16(s string) {
	m.f16 = &s
}

// F16 returns the value of the "f16" field in the mutation.
func (m *ClassMutation) F16() (r string, exists bool) {
	v := m.f16
	if v == nil {
		return
	}
	return *v, true
}

// OldF16 returns the old "f16" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF16(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF16 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF16 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF16: %w", err)
	}
	return oldValue.F16, nil
}

// ResetF16 resets all changes to the "f16" field.
func (m *ClassMutation) ResetF16() {
	m.f16 = nil
}

// SetF17 sets the "f17" field.
func (m *ClassMutation) SetF17(s string) {
	m.f17 = &s
}

// F17 returns the value of the "f17" field in the mutation.
func (m *ClassMutation) F17() (r string, exists bool) {
	v := m.f17
	if v == nil {
		return
	}
	return *v, true
}

// OldF17 returns the old "f17" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF17(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF17 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF17 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF17: %w", err)
	}
	return oldValue.F17, nil
}

// ResetF17 resets all changes to the "f17" field.
func (m *ClassMutation) ResetF17() {
	m.f17 = nil
}

// SetF18 sets the "f18" field.
func (m *ClassMutation) SetF18(s string) {
	m.f18 = &s
}

// F18 returns the value of the "f18" field in the mutation.
func (m *ClassMutation) F18() (r string, exists bool) {
	v := m.f18
	if v == nil {
		return
	}
	return *v, true
}

// OldF18 returns the old "f18" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF18(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF18 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF18 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF18: %w", err)
	}
	return oldValue.F18, nil
}

// ResetF18 resets all changes to the "f18" field.
func (m *ClassMutation) ResetF18() {
	m.f18 = nil
}

// SetF19 sets the "f19" field.
func (m *ClassMutation) SetF19(s string) {
	m.f19 = &s
}

// F19 returns the value of the "f19" field in the mutation.
func (m *ClassMutation) F19() (r string, exists bool) {
	v := m.f19
	if v == nil {
		return
	}
	return *v, true
}

// OldF19 returns the old "f19" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF19(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF19 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF19 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF19: %w", err)
	}
	return oldValue.F19, nil
}

// ResetF19 resets all changes to the "f19" field.
func (m *ClassMutation) ResetF19() {
	m.f19 = nil
}

// SetF20 sets the "f20" field.
func (m *ClassMutation) SetF20(s string) {
	m.f20 = &s
}

// F20 returns the value of the "f20" field in the mutation.
func (m *ClassMutation) F20() (r string, exists bool) {
	v := m.f20
	if v == nil {
		return
	}
	return *v, true
}

// OldF20 returns the old "f20" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF20(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF20 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF20 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF20: %w", err)
	}
	return oldValue.F20, nil
}

// ResetF20 resets all changes to the "f20" field.
func (m *ClassMutation) ResetF20() {
	m.f20 = nil
}

// SetF21 sets the "f21" field.
func (m *ClassMutation) SetF21(s string) {
	m.f21 = &s
}

// F21 returns the value of the "f21" field in the mutation.
func (m *ClassMutation) F21() (r string, exists bool) {
	v := m.f21
	if v == nil {
		return
	}
	return *v, true
}

// OldF21 returns the old "f21" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF21(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF21 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF21 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF21: %w", err)
	}
	return oldValue.F21, nil
}

// ResetF21 resets all changes to the "f21" field.
func (m *ClassMutation) ResetF21() {
	m.f21 = nil
}

// SetF22 sets the "f22" field.
func (m *ClassMutation) SetF22(s string) {
	m.f22 = &s
}

// F22 returns the value of the "f22" field in the mutation.
func (m *ClassMutation) F22() (r string, exists bool) {
	v := m.f22
	if v == nil {
		return
	}
	return *v, true
}

// OldF22 returns the old "f22" field's value of the Class entity.
// If the Class object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClassMutation) OldF22(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF22 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF22 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF22: %w", err)
	}
	return oldValue.F22, nil
}

// ResetF22 resets all changes to the "f22" field.
func (m *ClassMutation) ResetF22() {
	m.f22 = nil
}

// Where appends a list predicates to the ClassMutation builder.
func (m *ClassMutation) Where(ps ...predicate.Class) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClassMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClassMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Class, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClassMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClassMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Class).
func (m *ClassMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClassMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.name != nil {
		fields = append(fields, class.FieldName)
	}
	if m.class_name != nil {
		fields = append(fields, class.FieldClassName)
	}
	if m.f1 != nil {
		fields = append(fields, class.FieldF1)
	}
	if m.f2 != nil {
		fields = append(fields, class.FieldF2)
	}
	if m.f3 != nil {
		fields = append(fields, class.FieldF3)
	}
	if m.f4 != nil {
		fields = append(fields, class.FieldF4)
	}
	if m.f5 != nil {
		fields = append(fields, class.FieldF5)
	}
	if m.f6 != nil {
		fields = append(fields, class.FieldF6)
	}
	if m.f7 != nil {
		fields = append(fields, class.FieldF7)
	}
	if m.f8 != nil {
		fields = append(fields, class.FieldF8)
	}
	if m.f9 != nil {
		fields = append(fields, class.FieldF9)
	}
	if m.f10 != nil {
		fields = append(fields, class.FieldF10)
	}
	if m.f11 != nil {
		fields = append(fields, class.FieldF11)
	}
	if m.f12 != nil {
		fields = append(fields, class.FieldF12)
	}
	if m.f13 != nil {
		fields = append(fields, class.FieldF13)
	}
	if m.f14 != nil {
		fields = append(fields, class.FieldF14)
	}
	if m.f15 != nil {
		fields = append(fields, class.FieldF15)
	}
	if m.f16 != nil {
		fields = append(fields, class.FieldF16)
	}
	if m.f17 != nil {
		fields = append(fields, class.FieldF17)
	}
	if m.f18 != nil {
		fields = append(fields, class.FieldF18)
	}
	if m.f19 != nil {
		fields = append(fields, class.FieldF19)
	}
	if m.f20 != nil {
		fields = append(fields, class.FieldF20)
	}
	if m.f21 != nil {
		fields = append(fields, class.FieldF21)
	}
	if m.f22 != nil {
		fields = append(fields, class.FieldF22)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClassMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case class.FieldName:
		return m.Name()
	case class.FieldClassName:
		return m.ClassName()
	case class.FieldF1:
		return m.F1()
	case class.FieldF2:
		return m.F2()
	case class.FieldF3:
		return m.F3()
	case class.FieldF4:
		return m.F4()
	case class.FieldF5:
		return m.F5()
	case class.FieldF6:
		return m.F6()
	case class.FieldF7:
		return m.F7()
	case class.FieldF8:
		return m.F8()
	case class.FieldF9:
		return m.F9()
	case class.FieldF10:
		return m.F10()
	case class.FieldF11:
		return m.F11()
	case class.FieldF12:
		return m.F12()
	case class.FieldF13:
		return m.F13()
	case class.FieldF14:
		return m.F14()
	case class.FieldF15:
		return m.F15()
	case class.FieldF16:
		return m.F16()
	case class.FieldF17:
		return m.F17()
	case class.FieldF18:
		return m.F18()
	case class.FieldF19:
		return m.F19()
	case class.FieldF20:
		return m.F20()
	case class.FieldF21:
		return m.F21()
	case class.FieldF22:
		return m.F22()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClassMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case class.FieldName:
		return m.OldName(ctx)
	case class.FieldClassName:
		return m.OldClassName(ctx)
	case class.FieldF1:
		return m.OldF1(ctx)
	case class.FieldF2:
		return m.OldF2(ctx)
	case class.FieldF3:
		return m.OldF3(ctx)
	case class.FieldF4:
		return m.OldF4(ctx)
	case class.FieldF5:
		return m.OldF5(ctx)
	case class.FieldF6:
		return m.OldF6(ctx)
	case class.FieldF7:
		return m.OldF7(ctx)
	case class.FieldF8:
		return m.OldF8(ctx)
	case class.FieldF9:
		return m.OldF9(ctx)
	case class.FieldF10:
		return m.OldF10(ctx)
	case class.FieldF11:
		return m.OldF11(ctx)
	case class.FieldF12:
		return m.OldF12(ctx)
	case class.FieldF13:
		return m.OldF13(ctx)
	case class.FieldF14:
		return m.OldF14(ctx)
	case class.FieldF15:
		return m.OldF15(ctx)
	case class.FieldF16:
		return m.OldF16(ctx)
	case class.FieldF17:
		return m.OldF17(ctx)
	case class.FieldF18:
		return m.OldF18(ctx)
	case class.FieldF19:
		return m.OldF19(ctx)
	case class.FieldF20:
		return m.OldF20(ctx)
	case class.FieldF21:
		return m.OldF21(ctx)
	case class.FieldF22:
		return m.OldF22(ctx)
	}
	return nil, fmt.Errorf("unknown Class field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) SetField(name string, value ent.Value) error {
	switch name {
	case class.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case class.FieldClassName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClassName(v)
		return nil
	case class.FieldF1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF1(v)
		return nil
	case class.FieldF2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF2(v)
		return nil
	case class.FieldF3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF3(v)
		return nil
	case class.FieldF4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF4(v)
		return nil
	case class.FieldF5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF5(v)
		return nil
	case class.FieldF6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF6(v)
		return nil
	case class.FieldF7:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF7(v)
		return nil
	case class.FieldF8:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF8(v)
		return nil
	case class.FieldF9:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF9(v)
		return nil
	case class.FieldF10:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF10(v)
		return nil
	case class.FieldF11:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF11(v)
		return nil
	case class.FieldF12:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF12(v)
		return nil
	case class.FieldF13:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF13(v)
		return nil
	case class.FieldF14:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF14(v)
		return nil
	case class.FieldF15:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF15(v)
		return nil
	case class.FieldF16:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF16(v)
		return nil
	case class.FieldF17:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF17(v)
		return nil
	case class.FieldF18:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF18(v)
		return nil
	case class.FieldF19:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF19(v)
		return nil
	case class.FieldF20:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF20(v)
		return nil
	case class.FieldF21:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF21(v)
		return nil
	case class.FieldF22:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF22(v)
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClassMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClassMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClassMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Class numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClassMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClassMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClassMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Class nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClassMutation) ResetField(name string) error {
	switch name {
	case class.FieldName:
		m.ResetName()
		return nil
	case class.FieldClassName:
		m.ResetClassName()
		return nil
	case class.FieldF1:
		m.ResetF1()
		return nil
	case class.FieldF2:
		m.ResetF2()
		return nil
	case class.FieldF3:
		m.ResetF3()
		return nil
	case class.FieldF4:
		m.ResetF4()
		return nil
	case class.FieldF5:
		m.ResetF5()
		return nil
	case class.FieldF6:
		m.ResetF6()
		return nil
	case class.FieldF7:
		m.ResetF7()
		return nil
	case class.FieldF8:
		m.ResetF8()
		return nil
	case class.FieldF9:
		m.ResetF9()
		return nil
	case class.FieldF10:
		m.ResetF10()
		return nil
	case class.FieldF11:
		m.ResetF11()
		return nil
	case class.FieldF12:
		m.ResetF12()
		return nil
	case class.FieldF13:
		m.ResetF13()
		return nil
	case class.FieldF14:
		m.ResetF14()
		return nil
	case class.FieldF15:
		m.ResetF15()
		return nil
	case class.FieldF16:
		m.ResetF16()
		return nil
	case class.FieldF17:
		m.ResetF17()
		return nil
	case class.FieldF18:
		m.ResetF18()
		return nil
	case class.FieldF19:
		m.ResetF19()
		return nil
	case class.FieldF20:
		m.ResetF20()
		return nil
	case class.FieldF21:
		m.ResetF21()
		return nil
	case class.FieldF22:
		m.ResetF22()
		return nil
	}
	return fmt.Errorf("unknown Class field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClassMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClassMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClassMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClassMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClassMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClassMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClassMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Class unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClassMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Class edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	nick_name     *string
	f1            *string
	f2            *string
	f3            *string
	f4            *string
	f5            *string
	f6            *string
	f7            *string
	f8            *string
	f9            *string
	f10           *string
	f11           *string
	f12           *string
	f13           *string
	f14           *string
	f15           *string
	f16           *string
	f17           *string
	f18           *string
	f19           *string
	f20           *string
	f21           *string
	f22           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetNickName sets the "nick_name" field.
func (m *UserMutation) SetNickName(s string) {
	m.nick_name = &s
}

// NickName returns the value of the "nick_name" field in the mutation.
func (m *UserMutation) NickName() (r string, exists bool) {
	v := m.nick_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNickName returns the old "nick_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}
	return oldValue.NickName, nil
}

// ResetNickName resets all changes to the "nick_name" field.
func (m *UserMutation) ResetNickName() {
	m.nick_name = nil
}

// SetF1 sets the "f1" field.
func (m *UserMutation) SetF1(s string) {
	m.f1 = &s
}

// F1 returns the value of the "f1" field in the mutation.
func (m *UserMutation) F1() (r string, exists bool) {
	v := m.f1
	if v == nil {
		return
	}
	return *v, true
}

// OldF1 returns the old "f1" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF1: %w", err)
	}
	return oldValue.F1, nil
}

// ResetF1 resets all changes to the "f1" field.
func (m *UserMutation) ResetF1() {
	m.f1 = nil
}

// SetF2 sets the "f2" field.
func (m *UserMutation) SetF2(s string) {
	m.f2 = &s
}

// F2 returns the value of the "f2" field in the mutation.
func (m *UserMutation) F2() (r string, exists bool) {
	v := m.f2
	if v == nil {
		return
	}
	return *v, true
}

// OldF2 returns the old "f2" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF2: %w", err)
	}
	return oldValue.F2, nil
}

// ResetF2 resets all changes to the "f2" field.
func (m *UserMutation) ResetF2() {
	m.f2 = nil
}

// SetF3 sets the "f3" field.
func (m *UserMutation) SetF3(s string) {
	m.f3 = &s
}

// F3 returns the value of the "f3" field in the mutation.
func (m *UserMutation) F3() (r string, exists bool) {
	v := m.f3
	if v == nil {
		return
	}
	return *v, true
}

// OldF3 returns the old "f3" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF3: %w", err)
	}
	return oldValue.F3, nil
}

// ResetF3 resets all changes to the "f3" field.
func (m *UserMutation) ResetF3() {
	m.f3 = nil
}

// SetF4 sets the "f4" field.
func (m *UserMutation) SetF4(s string) {
	m.f4 = &s
}

// F4 returns the value of the "f4" field in the mutation.
func (m *UserMutation) F4() (r string, exists bool) {
	v := m.f4
	if v == nil {
		return
	}
	return *v, true
}

// OldF4 returns the old "f4" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF4: %w", err)
	}
	return oldValue.F4, nil
}

// ResetF4 resets all changes to the "f4" field.
func (m *UserMutation) ResetF4() {
	m.f4 = nil
}

// SetF5 sets the "f5" field.
func (m *UserMutation) SetF5(s string) {
	m.f5 = &s
}

// F5 returns the value of the "f5" field in the mutation.
func (m *UserMutation) F5() (r string, exists bool) {
	v := m.f5
	if v == nil {
		return
	}
	return *v, true
}

// OldF5 returns the old "f5" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF5: %w", err)
	}
	return oldValue.F5, nil
}

// ResetF5 resets all changes to the "f5" field.
func (m *UserMutation) ResetF5() {
	m.f5 = nil
}

// SetF6 sets the "f6" field.
func (m *UserMutation) SetF6(s string) {
	m.f6 = &s
}

// F6 returns the value of the "f6" field in the mutation.
func (m *UserMutation) F6() (r string, exists bool) {
	v := m.f6
	if v == nil {
		return
	}
	return *v, true
}

// OldF6 returns the old "f6" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF6: %w", err)
	}
	return oldValue.F6, nil
}

// ResetF6 resets all changes to the "f6" field.
func (m *UserMutation) ResetF6() {
	m.f6 = nil
}

// SetF7 sets the "f7" field.
func (m *UserMutation) SetF7(s string) {
	m.f7 = &s
}

// F7 returns the value of the "f7" field in the mutation.
func (m *UserMutation) F7() (r string, exists bool) {
	v := m.f7
	if v == nil {
		return
	}
	return *v, true
}

// OldF7 returns the old "f7" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF7(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF7: %w", err)
	}
	return oldValue.F7, nil
}

// ResetF7 resets all changes to the "f7" field.
func (m *UserMutation) ResetF7() {
	m.f7 = nil
}

// SetF8 sets the "f8" field.
func (m *UserMutation) SetF8(s string) {
	m.f8 = &s
}

// F8 returns the value of the "f8" field in the mutation.
func (m *UserMutation) F8() (r string, exists bool) {
	v := m.f8
	if v == nil {
		return
	}
	return *v, true
}

// OldF8 returns the old "f8" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF8(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF8: %w", err)
	}
	return oldValue.F8, nil
}

// ResetF8 resets all changes to the "f8" field.
func (m *UserMutation) ResetF8() {
	m.f8 = nil
}

// SetF9 sets the "f9" field.
func (m *UserMutation) SetF9(s string) {
	m.f9 = &s
}

// F9 returns the value of the "f9" field in the mutation.
func (m *UserMutation) F9() (r string, exists bool) {
	v := m.f9
	if v == nil {
		return
	}
	return *v, true
}

// OldF9 returns the old "f9" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF9(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF9 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF9 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF9: %w", err)
	}
	return oldValue.F9, nil
}

// ResetF9 resets all changes to the "f9" field.
func (m *UserMutation) ResetF9() {
	m.f9 = nil
}

// SetF10 sets the "f10" field.
func (m *UserMutation) SetF10(s string) {
	m.f10 = &s
}

// F10 returns the value of the "f10" field in the mutation.
func (m *UserMutation) F10() (r string, exists bool) {
	v := m.f10
	if v == nil {
		return
	}
	return *v, true
}

// OldF10 returns the old "f10" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF10(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF10 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF10 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF10: %w", err)
	}
	return oldValue.F10, nil
}

// ResetF10 resets all changes to the "f10" field.
func (m *UserMutation) ResetF10() {
	m.f10 = nil
}

// SetF11 sets the "f11" field.
func (m *UserMutation) SetF11(s string) {
	m.f11 = &s
}

// F11 returns the value of the "f11" field in the mutation.
func (m *UserMutation) F11() (r string, exists bool) {
	v := m.f11
	if v == nil {
		return
	}
	return *v, true
}

// OldF11 returns the old "f11" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF11(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF11 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF11 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF11: %w", err)
	}
	return oldValue.F11, nil
}

// ResetF11 resets all changes to the "f11" field.
func (m *UserMutation) ResetF11() {
	m.f11 = nil
}

// SetF12 sets the "f12" field.
func (m *UserMutation) SetF12(s string) {
	m.f12 = &s
}

// F12 returns the value of the "f12" field in the mutation.
func (m *UserMutation) F12() (r string, exists bool) {
	v := m.f12
	if v == nil {
		return
	}
	return *v, true
}

// OldF12 returns the old "f12" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF12(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF12 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF12 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF12: %w", err)
	}
	return oldValue.F12, nil
}

// ResetF12 resets all changes to the "f12" field.
func (m *UserMutation) ResetF12() {
	m.f12 = nil
}

// SetF13 sets the "f13" field.
func (m *UserMutation) SetF13(s string) {
	m.f13 = &s
}

// F13 returns the value of the "f13" field in the mutation.
func (m *UserMutation) F13() (r string, exists bool) {
	v := m.f13
	if v == nil {
		return
	}
	return *v, true
}

// OldF13 returns the old "f13" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF13(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF13 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF13 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF13: %w", err)
	}
	return oldValue.F13, nil
}

// ResetF13 resets all changes to the "f13" field.
func (m *UserMutation) ResetF13() {
	m.f13 = nil
}

// SetF14 sets the "f14" field.
func (m *UserMutation) SetF14(s string) {
	m.f14 = &s
}

// F14 returns the value of the "f14" field in the mutation.
func (m *UserMutation) F14() (r string, exists bool) {
	v := m.f14
	if v == nil {
		return
	}
	return *v, true
}

// OldF14 returns the old "f14" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF14(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF14 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF14 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF14: %w", err)
	}
	return oldValue.F14, nil
}

// ResetF14 resets all changes to the "f14" field.
func (m *UserMutation) ResetF14() {
	m.f14 = nil
}

// SetF15 sets the "f15" field.
func (m *UserMutation) SetF15(s string) {
	m.f15 = &s
}

// F15 returns the value of the "f15" field in the mutation.
func (m *UserMutation) F15() (r string, exists bool) {
	v := m.f15
	if v == nil {
		return
	}
	return *v, true
}

// OldF15 returns the old "f15" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF15(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF15 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF15 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF15: %w", err)
	}
	return oldValue.F15, nil
}

// ResetF15 resets all changes to the "f15" field.
func (m *UserMutation) ResetF15() {
	m.f15 = nil
}

// SetF16 sets the "f16" field.
func (m *UserMutation) SetF16(s string) {
	m.f16 = &s
}

// F16 returns the value of the "f16" field in the mutation.
func (m *UserMutation) F16() (r string, exists bool) {
	v := m.f16
	if v == nil {
		return
	}
	return *v, true
}

// OldF16 returns the old "f16" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF16(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF16 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF16 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF16: %w", err)
	}
	return oldValue.F16, nil
}

// ResetF16 resets all changes to the "f16" field.
func (m *UserMutation) ResetF16() {
	m.f16 = nil
}

// SetF17 sets the "f17" field.
func (m *UserMutation) SetF17(s string) {
	m.f17 = &s
}

// F17 returns the value of the "f17" field in the mutation.
func (m *UserMutation) F17() (r string, exists bool) {
	v := m.f17
	if v == nil {
		return
	}
	return *v, true
}

// OldF17 returns the old "f17" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF17(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF17 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF17 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF17: %w", err)
	}
	return oldValue.F17, nil
}

// ResetF17 resets all changes to the "f17" field.
func (m *UserMutation) ResetF17() {
	m.f17 = nil
}

// SetF18 sets the "f18" field.
func (m *UserMutation) SetF18(s string) {
	m.f18 = &s
}

// F18 returns the value of the "f18" field in the mutation.
func (m *UserMutation) F18() (r string, exists bool) {
	v := m.f18
	if v == nil {
		return
	}
	return *v, true
}

// OldF18 returns the old "f18" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF18(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF18 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF18 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF18: %w", err)
	}
	return oldValue.F18, nil
}

// ResetF18 resets all changes to the "f18" field.
func (m *UserMutation) ResetF18() {
	m.f18 = nil
}

// SetF19 sets the "f19" field.
func (m *UserMutation) SetF19(s string) {
	m.f19 = &s
}

// F19 returns the value of the "f19" field in the mutation.
func (m *UserMutation) F19() (r string, exists bool) {
	v := m.f19
	if v == nil {
		return
	}
	return *v, true
}

// OldF19 returns the old "f19" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF19(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF19 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF19 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF19: %w", err)
	}
	return oldValue.F19, nil
}

// ResetF19 resets all changes to the "f19" field.
func (m *UserMutation) ResetF19() {
	m.f19 = nil
}

// SetF20 sets the "f20" field.
func (m *UserMutation) SetF20(s string) {
	m.f20 = &s
}

// F20 returns the value of the "f20" field in the mutation.
func (m *UserMutation) F20() (r string, exists bool) {
	v := m.f20
	if v == nil {
		return
	}
	return *v, true
}

// OldF20 returns the old "f20" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF20(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF20 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF20 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF20: %w", err)
	}
	return oldValue.F20, nil
}

// ResetF20 resets all changes to the "f20" field.
func (m *UserMutation) ResetF20() {
	m.f20 = nil
}

// SetF21 sets the "f21" field.
func (m *UserMutation) SetF21(s string) {
	m.f21 = &s
}

// F21 returns the value of the "f21" field in the mutation.
func (m *UserMutation) F21() (r string, exists bool) {
	v := m.f21
	if v == nil {
		return
	}
	return *v, true
}

// OldF21 returns the old "f21" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF21(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF21 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF21 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF21: %w", err)
	}
	return oldValue.F21, nil
}

// ResetF21 resets all changes to the "f21" field.
func (m *UserMutation) ResetF21() {
	m.f21 = nil
}

// SetF22 sets the "f22" field.
func (m *UserMutation) SetF22(s string) {
	m.f22 = &s
}

// F22 returns the value of the "f22" field in the mutation.
func (m *UserMutation) F22() (r string, exists bool) {
	v := m.f22
	if v == nil {
		return
	}
	return *v, true
}

// OldF22 returns the old "f22" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldF22(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldF22 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldF22 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldF22: %w", err)
	}
	return oldValue.F22, nil
}

// ResetF22 resets all changes to the "f22" field.
func (m *UserMutation) ResetF22() {
	m.f22 = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.nick_name != nil {
		fields = append(fields, user.FieldNickName)
	}
	if m.f1 != nil {
		fields = append(fields, user.FieldF1)
	}
	if m.f2 != nil {
		fields = append(fields, user.FieldF2)
	}
	if m.f3 != nil {
		fields = append(fields, user.FieldF3)
	}
	if m.f4 != nil {
		fields = append(fields, user.FieldF4)
	}
	if m.f5 != nil {
		fields = append(fields, user.FieldF5)
	}
	if m.f6 != nil {
		fields = append(fields, user.FieldF6)
	}
	if m.f7 != nil {
		fields = append(fields, user.FieldF7)
	}
	if m.f8 != nil {
		fields = append(fields, user.FieldF8)
	}
	if m.f9 != nil {
		fields = append(fields, user.FieldF9)
	}
	if m.f10 != nil {
		fields = append(fields, user.FieldF10)
	}
	if m.f11 != nil {
		fields = append(fields, user.FieldF11)
	}
	if m.f12 != nil {
		fields = append(fields, user.FieldF12)
	}
	if m.f13 != nil {
		fields = append(fields, user.FieldF13)
	}
	if m.f14 != nil {
		fields = append(fields, user.FieldF14)
	}
	if m.f15 != nil {
		fields = append(fields, user.FieldF15)
	}
	if m.f16 != nil {
		fields = append(fields, user.FieldF16)
	}
	if m.f17 != nil {
		fields = append(fields, user.FieldF17)
	}
	if m.f18 != nil {
		fields = append(fields, user.FieldF18)
	}
	if m.f19 != nil {
		fields = append(fields, user.FieldF19)
	}
	if m.f20 != nil {
		fields = append(fields, user.FieldF20)
	}
	if m.f21 != nil {
		fields = append(fields, user.FieldF21)
	}
	if m.f22 != nil {
		fields = append(fields, user.FieldF22)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldNickName:
		return m.NickName()
	case user.FieldF1:
		return m.F1()
	case user.FieldF2:
		return m.F2()
	case user.FieldF3:
		return m.F3()
	case user.FieldF4:
		return m.F4()
	case user.FieldF5:
		return m.F5()
	case user.FieldF6:
		return m.F6()
	case user.FieldF7:
		return m.F7()
	case user.FieldF8:
		return m.F8()
	case user.FieldF9:
		return m.F9()
	case user.FieldF10:
		return m.F10()
	case user.FieldF11:
		return m.F11()
	case user.FieldF12:
		return m.F12()
	case user.FieldF13:
		return m.F13()
	case user.FieldF14:
		return m.F14()
	case user.FieldF15:
		return m.F15()
	case user.FieldF16:
		return m.F16()
	case user.FieldF17:
		return m.F17()
	case user.FieldF18:
		return m.F18()
	case user.FieldF19:
		return m.F19()
	case user.FieldF20:
		return m.F20()
	case user.FieldF21:
		return m.F21()
	case user.FieldF22:
		return m.F22()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldNickName:
		return m.OldNickName(ctx)
	case user.FieldF1:
		return m.OldF1(ctx)
	case user.FieldF2:
		return m.OldF2(ctx)
	case user.FieldF3:
		return m.OldF3(ctx)
	case user.FieldF4:
		return m.OldF4(ctx)
	case user.FieldF5:
		return m.OldF5(ctx)
	case user.FieldF6:
		return m.OldF6(ctx)
	case user.FieldF7:
		return m.OldF7(ctx)
	case user.FieldF8:
		return m.OldF8(ctx)
	case user.FieldF9:
		return m.OldF9(ctx)
	case user.FieldF10:
		return m.OldF10(ctx)
	case user.FieldF11:
		return m.OldF11(ctx)
	case user.FieldF12:
		return m.OldF12(ctx)
	case user.FieldF13:
		return m.OldF13(ctx)
	case user.FieldF14:
		return m.OldF14(ctx)
	case user.FieldF15:
		return m.OldF15(ctx)
	case user.FieldF16:
		return m.OldF16(ctx)
	case user.FieldF17:
		return m.OldF17(ctx)
	case user.FieldF18:
		return m.OldF18(ctx)
	case user.FieldF19:
		return m.OldF19(ctx)
	case user.FieldF20:
		return m.OldF20(ctx)
	case user.FieldF21:
		return m.OldF21(ctx)
	case user.FieldF22:
		return m.OldF22(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickName(v)
		return nil
	case user.FieldF1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF1(v)
		return nil
	case user.FieldF2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF2(v)
		return nil
	case user.FieldF3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF3(v)
		return nil
	case user.FieldF4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF4(v)
		return nil
	case user.FieldF5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF5(v)
		return nil
	case user.FieldF6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF6(v)
		return nil
	case user.FieldF7:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF7(v)
		return nil
	case user.FieldF8:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF8(v)
		return nil
	case user.FieldF9:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF9(v)
		return nil
	case user.FieldF10:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF10(v)
		return nil
	case user.FieldF11:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF11(v)
		return nil
	case user.FieldF12:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF12(v)
		return nil
	case user.FieldF13:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF13(v)
		return nil
	case user.FieldF14:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF14(v)
		return nil
	case user.FieldF15:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF15(v)
		return nil
	case user.FieldF16:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF16(v)
		return nil
	case user.FieldF17:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF17(v)
		return nil
	case user.FieldF18:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF18(v)
		return nil
	case user.FieldF19:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF19(v)
		return nil
	case user.FieldF20:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF20(v)
		return nil
	case user.FieldF21:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF21(v)
		return nil
	case user.FieldF22:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetF22(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldNickName:
		m.ResetNickName()
		return nil
	case user.FieldF1:
		m.ResetF1()
		return nil
	case user.FieldF2:
		m.ResetF2()
		return nil
	case user.FieldF3:
		m.ResetF3()
		return nil
	case user.FieldF4:
		m.ResetF4()
		return nil
	case user.FieldF5:
		m.ResetF5()
		return nil
	case user.FieldF6:
		m.ResetF6()
		return nil
	case user.FieldF7:
		m.ResetF7()
		return nil
	case user.FieldF8:
		m.ResetF8()
		return nil
	case user.FieldF9:
		m.ResetF9()
		return nil
	case user.FieldF10:
		m.ResetF10()
		return nil
	case user.FieldF11:
		m.ResetF11()
		return nil
	case user.FieldF12:
		m.ResetF12()
		return nil
	case user.FieldF13:
		m.ResetF13()
		return nil
	case user.FieldF14:
		m.ResetF14()
		return nil
	case user.FieldF15:
		m.ResetF15()
		return nil
	case user.FieldF16:
		m.ResetF16()
		return nil
	case user.FieldF17:
		m.ResetF17()
		return nil
	case user.FieldF18:
		m.ResetF18()
		return nil
	case user.FieldF19:
		m.ResetF19()
		return nil
	case user.FieldF20:
		m.ResetF20()
		return nil
	case user.FieldF21:
		m.ResetF21()
		return nil
	case user.FieldF22:
		m.ResetF22()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
